Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_adaptive", "auto_examples/plot_chull", "auto_examples/plot_gl_sgl", "auto_examples/plot_line_search", "auto_examples/plot_one_std", "auto_examples/plot_sparse_signal", "auto_examples/plot_stepwise", "auto_examples/sg_execution_times", "contributing", "index", "install", "license", "sparselm.model", "sparselm.model_selection", "sparselm.stepwise", "sparselm.tools"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_adaptive.rst", "auto_examples/plot_chull.rst", "auto_examples/plot_gl_sgl.rst", "auto_examples/plot_line_search.rst", "auto_examples/plot_one_std.rst", "auto_examples/plot_sparse_signal.rst", "auto_examples/plot_stepwise.rst", "auto_examples/sg_execution_times.rst", "contributing.rst", "index.rst", "install.rst", "license.rst", "sparselm.model.rst", "sparselm.model_selection.rst", "sparselm.stepwise.rst", "sparselm.tools.rst"], "titles": ["API Documentation", "Examples", "Using adaptive regularization", "Adding solution constraints", "(Sparse) Group regression", "Tuning hyperparameters with line search", "Hyperparameters selection with 1-std rule", "Recovering sparse signals", "Using stepwise estimator", "Computation times", "Contributing", "Sparse Linear Regression Models", "Install", "License", "sparselm.model", "sparselm.model_selection", "sparselm.stepwise", "sparselm.tools"], "terms": {"sparselm": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 15, 16, 17], "ordinaryleastsquar": [0, 14], "lasso": [0, 2, 3, 4, 6, 8, 11, 14], "bestsubsetselect": [0, 7, 12, 14], "ridgedbestsubsetselect": [0, 14], "regularizedl0": [0, 12, 14], "l1l0": [0, 11, 14], "l2l0": [0, 3, 5, 11, 14, 15], "grouplasso": [0, 4, 14], "overlapgrouplasso": [0, 14], "sparsegrouplasso": [0, 4, 14], "ridgedgrouplasso": [0, 14], "adaptivelasso": [0, 2, 11, 14], "adaptivegrouplasso": [0, 14], "adaptiveoverlapgrouplasso": [0, 14], "adaptivesparsegrouplasso": [0, 14], "adaptiveridgedgrouplasso": [0, 14], "stepwis": [0, 1, 9], "stepwiseestim": [0, 8, 16], "model_select": [0, 2, 4, 5, 6, 8, 11], "gridsearchcv": [0, 2, 4, 6, 8, 11, 14, 15, 16], "linesearchcv": [0, 5, 6, 8, 15, 16], "tool": 0, "constrain_coeffici": [0, 17], "r2_score_to_cv_error": [0, 17], "thi": [1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 16, 17], "i": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16], "set": [1, 4, 14, 15, 16], "simpl": [1, 14, 15], "us": [1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17], "spars": [1, 3, 9, 10, 12, 13, 14, 15, 16], "linear": [1, 7, 14, 16, 17], "regress": [1, 3, 9, 12, 14, 15, 17], "implement": [1, 8, 14, 15], "lm": [1, 3, 10, 11, 12, 13, 15], "For": [1, 8, 10, 11, 12, 14, 15, 16], "vast": 1, "major": 1, "case": [1, 8, 15], "can": [1, 2, 5, 8, 10, 12, 14, 15, 16], "same": [1, 14, 15], "wai": [1, 10, 13], "scikit": [1, 3, 7, 10, 11, 15, 16], "learn": [1, 3, 7, 10, 11, 15, 16], "recov": [1, 9], "signal": [1, 4, 9], "tune": [1, 3, 9], "hyperparamet": [1, 3, 8, 9], "line": [1, 9, 15], "search": [1, 2, 6, 9, 15, 16], "estim": [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 16], "adapt": [1, 7, 9, 11, 14], "regular": [1, 9, 14], "select": [1, 2, 3, 7, 9, 11, 14, 15, 16], "1": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17], "std": [1, 9], "rule": [1, 9, 15], "group": [1, 2, 5, 8, 9, 11, 14, 15, 16], "ad": [1, 9, 14, 15], "solut": [1, 9, 14], "constraint": [1, 9, 14], "download": [1, 2, 3, 4, 5, 6, 7, 8], "all": [1, 3, 10, 11, 13, 14, 15, 16], "python": [1, 2, 3, 4, 5, 6, 7, 8, 12], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 17], "code": [1, 2, 3, 4, 5, 6, 7, 8, 13], "auto_examples_python": 1, "zip": [1, 3], "jupyt": [1, 2, 3, 4, 5, 6, 7, 8], "notebook": [1, 2, 3, 4, 5, 6, 7, 8], "auto_examples_jupyt": 1, "galleri": [1, 2, 3, 4, 5, 6, 7, 8], "gener": [1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16], "sphinx": [1, 2, 3, 4, 5, 6, 7, 8], "go": [2, 3, 4, 5, 6, 7, 8, 10, 16], "end": [2, 3, 4, 5, 6, 7, 8, 15, 16], "full": [2, 3, 4, 5, 6, 7, 8], "exampl": [2, 3, 4, 5, 6, 7, 8, 14, 15, 16], "iter": [2, 5, 14, 15], "re": [2, 10, 14], "weight": [2, 3, 14, 16, 17], "techniqu": [2, 6], "improv": [2, 8, 10], "featur": [2, 3, 8, 10, 13, 14, 15, 16], "properti": [2, 15], "over": [2, 14, 15], "standard": [2, 5, 6, 14, 15, 17], "extens": 2, "In": [2, 3, 7, 8, 10, 14, 15, 17], "we": [2, 3, 7, 8, 10, 12, 15], "compar": [2, 7], "perform": [2, 4, 5, 6, 8, 13, 15], "metric": [2, 3, 4, 5, 6, 8, 15], "train": [2, 3, 4, 5, 6, 8, 14, 15, 16], "r2": [2, 4, 5, 6, 8, 17], "0": [2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16], "969": 2, "test": [2, 4, 5, 6, 8, 10, 14, 15, 16], "952": [2, 6], "rmse": [2, 3, 4, 5, 6, 8], "37": [2, 6], "434": 2, "42": [2, 6], "415": 2, "970": 2, "958": 2, "36": 2, "521": 2, "40": [2, 5, 6, 8], "001": 2, "import": [2, 3, 4, 5, 6, 7, 8, 11], "matplotlib": [2, 3, 4, 6, 7, 8], "pyplot": [2, 3, 4, 6, 7, 8], "plt": [2, 3, 4, 6, 7, 8], "numpi": [2, 3, 4, 5, 6, 7, 8, 11], "np": [2, 3, 4, 5, 6, 7, 8, 11, 14, 15], "from": [2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17], "sklearn": [2, 3, 4, 5, 6, 7, 8, 11, 14, 15, 16], "dataset": [2, 4, 5, 6, 7, 8, 11, 15], "make_regress": [2, 5, 6, 8, 11], "linear_model": [2, 3, 4, 6, 7, 8, 11], "mean_squared_error": [2, 3, 4, 5, 6, 8], "r2_score": [2, 4, 5, 6, 8, 14, 15, 16], "kfold": [2, 4, 5, 6, 8, 15], "train_test_split": [2, 4, 5, 6, 8], "x": [2, 3, 4, 5, 6, 7, 8, 11, 14, 15, 16, 17], "y": [2, 3, 4, 5, 6, 7, 8, 11, 14, 15, 16, 17], "coef": [2, 4, 5, 6, 7, 8, 14, 17], "n_sampl": [2, 4, 5, 6, 7, 8, 11, 14, 15, 16], "200": [2, 4, 6, 8, 11], "n_featur": [2, 5, 6, 7, 8, 11, 14, 15, 16], "100": [2, 4, 6, 8, 14], "n_inform": [2, 5, 6, 8], "10": [2, 4, 6, 7, 8, 14], "nois": [2, 4, 5, 6, 7, 8], "bia": [2, 4, 5, 6, 8], "15": [2, 4, 5, 6, 8, 9], "true": [2, 3, 4, 5, 6, 8, 14, 15, 16], "random_st": [2, 4, 5, 6, 7, 8, 11], "x_train": [2, 4, 5, 6, 8], "x_test": [2, 4, 5, 6, 8], "y_train": [2, 4, 5, 6, 8], "y_test": [2, 4, 5, 6, 8], "test_siz": [2, 4, 5, 6, 8], "25": [2, 5, 6, 8], "creat": [2, 3, 4, 5, 6, 8, 14, 15], "fit_intercept": [2, 3, 4, 5, 6, 8, 11, 14], "alasso": [2, 11], "max_it": [2, 14], "5": [2, 3, 4, 5, 6, 7, 8, 14, 15], "cv": [2, 4, 5, 6, 8, 15, 17], "object": [2, 3, 5, 6, 8, 14, 15, 16], "each": [2, 5, 6, 8, 14, 15, 16, 17], "cv5": [2, 4, 5, 6, 8], "n_split": [2, 4, 5, 6, 8], "shuffl": [2, 4, 5, 6, 8, 15], "param": [2, 5, 6, 8, 14, 15, 16], "alpha": [2, 3, 4, 5, 6, 8, 11, 14, 15], "logspac": [2, 4, 5, 6, 8], "lasso_cv": [2, 4], "n_job": [2, 4, 5, 6, 8, 15], "alasso_cv": 2, "fit": [2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17], "data": [2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16], "calcul": [2, 4, 5, 6, 8], "lasso_train": [2, 4], "predict": [2, 3, 4, 5, 6, 8, 14, 15, 16], "sqrt": [2, 3, 4, 5, 6, 8, 14], "lasso_test": [2, 4], "alasso_train": 2, "alasso_test": 2, "print": [2, 3, 4, 5, 6, 8, 11], "f": [2, 3, 4, 5, 6, 8, 14], "3f": [2, 4, 5, 6, 8], "plot": [2, 3, 4, 6, 7, 8], "coeffici": [2, 3, 5, 6, 8, 14, 16, 17], "fig": [2, 3, 4, 6, 8], "ax": [2, 3, 4, 6, 8], "subplot": [2, 3, 4, 6, 7, 8], "o": [2, 4, 6, 8], "label": [2, 4, 6, 8, 15], "best_estimator_": [2, 6, 15], "coef_": [2, 3, 6, 7, 8, 14], "set_xlabel": [2, 3, 4, 6, 8], "covari": [2, 3, 6, 8, 14], "index": [2, 3, 6, 8, 14, 15], "set_ylabel": [2, 3, 4, 6, 8], "valu": [2, 3, 4, 6, 8, 14, 15, 16], "legend": [2, 3, 4, 6, 8], "show": [2, 3, 4, 6, 7, 8], "min": [2, 4, 8], "max": [2, 4, 6, 8], "k": [2, 4, 6, 8], "total": [2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16], "run": [2, 3, 4, 5, 6, 7, 8, 10, 12, 15], "time": [2, 3, 4, 5, 6, 7, 8, 10, 14, 15], "script": [2, 3, 4, 5, 6, 7, 8], "minut": [2, 3, 4, 5, 6, 7, 8], "3": [2, 3, 4, 7, 8, 13, 14, 15, 16], "183": [2, 9], "second": [2, 3, 4, 5, 6, 7, 8, 14, 15], "plot_adapt": [2, 9], "py": [2, 3, 4, 5, 6, 7, 8, 9], "ipynb": [2, 3, 4, 5, 6, 7, 8], "allow": [3, 8, 14, 15, 16], "includ": [3, 11, 13, 14, 15], "extern": 3, "expos": 3, "underli": [3, 11, 14, 15], "cvxpy": [3, 11, 12, 14], "problem": [3, 7, 8, 10, 11, 12, 14], "solv": [3, 11, 12, 14], "addit": [3, 10, 14, 15], "non": [3, 7, 13, 15], "neg": [3, 14, 15, 16], "note": [3, 7, 14, 15, 16], "That": 3, "function": [3, 11, 13, 14, 15], "doe": [3, 15], "fulli": [3, 16], "align": 3, "requir": [3, 5, 10, 12, 13, 14, 15, 16], "compat": [3, 16], "mean": [3, 6, 14, 15, 16], "an": [3, 5, 8, 10, 12, 14, 15, 16, 17], "ski": 3, "kit": 3, "pipelin": [3, 14, 15, 16], "support": [3, 12, 14, 15], "To": [3, 10, 12], "how": [3, 4, 14, 15, 16], "common": 3, "materi": [3, 13], "scienc": 3, "format": [3, 5, 10], "energi": [3, 8, 13], "mani": 3, "configur": 3, "alloi": 3, "usual": [3, 12, 14], "veri": [3, 10, 11, 12, 14], "ensur": [3, 10, 14], "ground": 3, "state": 3, "e": [3, 10, 14, 15, 16], "defin": [3, 14, 15, 16], "lower": [3, 17], "convex": [3, 12], "hull": 3, "v": [3, 14, 16], "composit": [3, 15, 16], "graph": 3, "remain": 3, "similarli": 3, "often": 3, "ar": [3, 6, 10, 11, 12, 13, 14, 15, 16], "abov": [3, 12, 13, 14], "The": [3, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17], "follow": [3, 5, 10, 13, 14], "methodologi": 3, "describ": [3, 14], "paper": 3, "http": [3, 7, 10, 12, 14], "www": [3, 14], "natur": 3, "com": [3, 10, 12], "articl": 3, "s41524": 3, "017": 3, "0032": 3, "pymatgen": 3, "analysi": 3, "packag": [3, 10], "instal": [3, 10, 13, 14], "easili": 3, "org": [3, 7, 14], "html": [3, 7, 14], "taken": 3, "tutori": [3, 14], "icet": 3, "materialsmodel": 3, "cluster": [3, 8], "expans": [3, 8], "0028": 3, "0030": 3, "constra": 3, "0036": 3, "json": 3, "phase_diagram": 3, "pd": 3, "core": 3, "structur": [3, 11, 15], "load": 3, "corr": 3, "npy": 3, "correspond": [3, 14, 15, 16], "open": [3, 10, 12, 14], "fp": 3, "from_dict": 3, "": [3, 10, 13, 14, 15, 16], "regressor": [3, 5, 7, 8, 14, 16], "have": [3, 8, 10, 14, 15], "alreadi": [3, 11, 14], "been": [3, 15], "lasso_regressor": 3, "29e": 3, "pseudo": [3, 14], "l0": [3, 5, 11, 14], "norm": [3, 14], "eta": [3, 5, 14], "l2": [3, 14], "l2l0_regressor": 3, "16e": 3, "7": [3, 5, 7, 11], "66e": 3, "6": [3, 5, 6, 7], "solver": [3, 5, 7, 14], "gurobi": [3, 5, 7, 14], "solver_opt": [3, 5, 7, 14], "thread": [3, 5, 7], "4": [3, 5, 7, 16], "phase": 3, "diagram": 3, "entri": [3, 14], "training_entri": 3, "enumer": 3, "sampl": [3, 14, 15, 16, 17], "refer": [3, 14, 15], "correl": 3, "vector": [3, 8, 14, 15, 16, 17], "len": [3, 7, 14, 15], "must": [3, 5, 12, 13, 14, 15, 16], "scale": [3, 7], "size": [3, 14], "pdentri": 3, "attribut": [3, 14, 15], "append": 3, "training_pd": 3, "phasediagram": 3, "pplotter": 3, "pdplotter": 3, "backend": [3, 14], "show_unst": 3, "label_unst": 3, "fals": [3, 8, 11, 14, 15, 16], "base": [3, 12, 14, 15, 16], "lasso_i": 3, "lasso_pd": 3, "s_i": 3, "y_i": 3, "l2l0_y": 3, "l2l0_pd": 3, "notic": [3, 13, 15, 16], "both": [3, 6], "miss": 3, "ag5pd3": 3, "also": [3, 5, 12, 14, 15, 16], "add": [3, 10, 14], "spuriou": 3, "present": 3, "matric": [3, 14], "two": 3, "type": [3, 14, 15, 16, 17], "contraint": 3, "keep": [3, 10, 14, 16, 17], "unchang": [3, 14, 15, 16], "2": [3, 4, 7, 8, 11, 13, 14, 15, 16], "stai": 3, "comput": [3, 13, 15], "matrix": [3, 8, 14, 15, 16], "unstabl": 3, "decomposit": 3, "product": [3, 7, 13], "x_unstabl": 3, "zero": 3, "shape": [3, 14, 15, 16], "unstable_entri": 3, "x_decomp": 3, "zeros_lik": 3, "is_el": 3, "continu": 3, "decomp_entri": 3, "ehul": 3, "get_decomp_and_e_above_hul": 3, "dentri": 3, "amount": 3, "item": 3, "ratio": [3, 14], "num_atom": 3, "wa": 3, "x_stabl": 3, "stable_entri": 3, "x_gsdecomp": 3, "gs_pd": 3, "get_decomp_and_phase_separation_energi": 3, "constrained_regressor": 3, "now": 3, "access": [3, 14], "ha": [3, 12, 14, 15, 16], "call": [3, 14, 15, 16], "gigen": 3, "generate_problem": [3, 14], "repres": [3, 14, 15], "regressino": 3, "j": 3, "canonicals_": [3, 14], "beta": [3, 14], "variabl": [3, 14, 15], "ie": [3, 14], "new": [3, 10, 14, 15, 16], "epsilon": 3, "0005": 3, "sensit": 3, "margin": 3, "add_constraint": [3, 14], "1e": [3, 6, 14], "constrain": [3, 17], "look": 3, "l2l0c_y": 3, "constrained_pd": 3, "forc": 3, "respect": [3, 15], "trainind": 3, "differ": [3, 8, 14, 15], "result": [3, 6, 7, 15], "lasso_rms": 3, "l2l0_rmse": 3, "l2l0c_rmse": 3, "4f": 3, "841": [3, 5, 9], "plot_chul": [3, 9], "simul": 4, "level": [4, 14], "sparsiti": [4, 6, 14], "within": [4, 17], "onli": [4, 7, 8, 10, 14, 15, 16], "867": 4, "831": 4, "170": 4, "553": 4, "195": 4, "703": 4, "869": 4, "830": 4, "169": 4, "129": 4, "990": 4, "939": 4, "82": 4, "316": 4, "119": 4, "818": 4, "935": 4, "837": 4, "85": 4, "122": 4, "117": 4, "262": 4, "warn": 4, "make_group_regress": 4, "filterwarn": 4, "ignor": [4, 14, 15, 16], "categori": 4, "userwarn": 4, "converg": [4, 14], "400": 4, "n_group": 4, "n_features_per_group": 4, "n_informative_group": 4, "frac_informative_in_group": 4, "split": [4, 15], "glasso_cv": 4, "marker": 4, "l": 4, "glasso_train": 4, "glasso_test": 4, "n": 4, "sglasso_cv": 4, "l1_ratio": [4, 14], "arang": [4, 5], "8": [4, 5, 6, 7], "sglasso_train": 4, "sglasso_test": 4, "346": [4, 9], "plot_gl_sgl": [4, 9], "typic": 5, "optim": [5, 8, 11, 12, 14, 15, 16], "multipl": [5, 15], "weakli": 5, "uncorrel": 5, "showcas": 5, "usag": 5, "mix": [5, 12, 14], "where": [5, 8, 14, 15, 16], "grid": [5, 15], "too": 5, "computation": [5, 15], "expens": [5, 15], "996": 5, "13": [5, 6], "411": 5, "74": 5, "326": 5, "60": [5, 8], "30": 5, "paramet": [5, 11, 14, 15, 16, 17], "provid": [5, 13, 14, 15, 16], "singleton": [5, 14], "dtype": [5, 14, 16], "int": [5, 14, 15, 16], "list": [5, 13, 14, 15, 16, 17], "tupl": [5, 8, 15, 16], "order": [5, 10, 15], "being": 5, "them": [5, 10, 15, 16], "get": [5, 14, 15, 16], "per": 5, "specifi": [5, 12, 14, 15, 16, 17], "scan": [5, 15], "first": [5, 8, 10, 12, 14, 15, 16], "l2l0_cv": 5, "l2l0_train": 5, "l2l0_test": 5, "19": [5, 9], "607": [5, 9], "plot_line_search": [5, 9], "One": [6, 15], "deviat": 6, "promot": [6, 13], "robust": [6, 15], "when": [6, 10, 14, 15, 16], "cross": [6, 15, 17], "valid": [6, 15, 17], "noisi": [6, 7], "chosen": 6, "equal": [6, 14, 15], "maximum": [6, 14, 15], "yield": [6, 15], "minimum": 6, "avail": [6, 10, 13, 15], "under": [6, 13, 14], "9519279617756045": 6, "957": 6, "941": 6, "44": 6, "083": 6, "47": [6, 9], "177": 6, "968": 6, "854": 6, "665": 6, "22": 6, "20": [6, 7], "lasso_cv_std": 6, "opt_selection_method": [6, 15], "one_std_scor": [6, 15], "lasso_cv_opt": 6, "max_scor": [6, 15], "lasso_std_train": 6, "lasso_std_test": 6, "best_params_": [6, 11, 15], "sum": [6, 14, 16], "ab": [6, 14], "lasso_opt_train": 6, "lasso_opt_test": 6, "score": [6, 14, 15, 16, 17], "cv_results_": [6, 15], "param_alpha": 6, "mean_test_scor": 6, "std_test_scor": 6, "563": [6, 9], "plot_one_std": [6, 9], "obtain": [7, 17], "those": [7, 8], "orthogonalmatchingpursuit": 7, "although": 7, "best": [7, 11, 14, 15, 16], "subset": [7, 11, 14], "tend": 7, "give": [7, 15], "more": [7, 10, 11, 12, 14, 15], "accur": 7, "much": 7, "better": 7, "larger": [7, 12], "document": [7, 10, 11, 12, 13, 15], "stabl": 7, "auto_exampl": [7, 9], "plot_omp": 7, "sphx": 7, "glr": 7, "auto": 7, "omp": 7, "restrict": 7, "licens": [7, 12], "expir": 7, "2024": 7, "28": 7, "make_sparse_coded_sign": 7, "n_compon": 7, "50": 7, "n_nonzero_coef": 7, "w": [7, 14, 15, 16], "t": [7, 14, 15, 16], "idx": 7, "nonzero": [7, 14], "distort": 7, "clean": 7, "y_noisi": 7, "005": 7, "random": 7, "randn": 7, "figur": 7, "figsiz": 7, "14": 7, "xlim": 7, "titl": 7, "stem": 7, "free": [7, 10, 12, 13], "reconstruct": 7, "idx_r": 7, "orthogon": 7, "match": 7, "pursuit": 7, "measur": 7, "bss": 7, "sparse_bound": [7, 14], "recoveri": 7, "tight_layout": 7, "953": [7, 9], "plot_sparse_sign": [7, 9], "It": [8, 12], "compris": 8, "sever": [8, 11], "respons": [8, 16], "specif": [8, 13, 15], "row": [8, 15], "target": [8, 14, 15, 16, 17], "pass": [8, 10, 14, 15, 16], "residu": [8, 14, 16], "down": 8, "subsequ": [8, 14], "pure": 8, "demonstr": 8, "purpos": [8, 13], "do": [8, 10, 15, 16], "expect": [8, 14, 16], "ani": [8, 10, 11, 12, 13, 14, 16], "meaning": 8, "howev": [8, 12, 13, 14, 15], "certain": [8, 15, 16], "substanti": 8, "effect": [8, 14, 15, 16], "atom": 8, "configr": 8, "crystallin": 8, "solid": 8, "ionic": 8, "system": 8, "one": [8, 14, 15], "might": 8, "want": [8, 10, 14], "singl": [8, 15], "site": 8, "subtract": 8, "main": [8, 10], "other": [8, 13, 14, 15, 16], "interact": 8, "954": 8, "904": 8, "45": 8, "437": 8, "245": 8, "0x7f381a22b280": 8, "ridg": [8, 11, 14], "step": [8, 10, 14, 15, 16], "estimator1": 8, "estimator2": 8, "compos": 8, "either": [8, 13, 15, 16], "last": 8, "rest": [8, 16], "est": 8, "est2": 8, "99": 8, "rang": [8, 14, 17], "stepwise_train": 8, "stepwise_test": 8, "569": [8, 9], "plot_stepwis": [8, 9], "00": 9, "061": 9, "execut": [9, 15], "file": 9, "mb": 9, "04": 9, "03": 9, "02": 9, "welcom": 10, "form": [10, 13, 14, 15], "pleas": [10, 14, 15, 16], "consid": [10, 16], "you": [10, 11, 12, 13, 14, 15, 16], "tracker": 10, "share": 10, "request": [10, 14, 15, 16], "idea": 10, "report": 10, "save": 10, "help": [10, 16], "make": [10, 13], "sure": 10, "thei": [10, 16], "properli": 10, "address": 10, "descript": 10, "neat": 10, "possibl": [10, 13, 14, 15, 16], "up": [10, 15, 16], "If": [10, 11, 12, 14, 15, 16], "written": [10, 13], "start": [10, 15], "write": 10, "think": 10, "below": 10, "should": [10, 14, 15, 16], "unit": [10, 12], "well": [10, 14, 15], "googl": 10, "style": 10, "docstr": 10, "pre": [10, 12], "commit": 10, "hook": 10, "black": 10, "fork": [10, 12], "repositori": [10, 12], "clone": [10, 12, 14], "your": [10, 13, 15], "local": 10, "workspac": 10, "upstream": 10, "remot": 10, "git": [10, 12], "github": [10, 12], "cedergrouphub": [10, 12], "alwai": [10, 14, 15, 16], "branch": 10, "date": 10, "Be": 10, "good": [10, 13, 15], "about": [10, 15], "fast": [10, 15], "forward": 10, "merg": 10, "while": [10, 15], "chang": [10, 14, 15, 16], "without": [10, 12, 13], "edit": 10, "mode": [10, 15], "pip": [10, 12], "so": [10, 12, 14, 15], "recommend": [10, 12, 14], "short": 10, "easi": [10, 11], "fix": [10, 13, 16], "complex": 10, "try": [10, 15], "name": [10, 13, 14, 15, 16], "feautr": 10, "feel": 10, "pr": 10, "even": [10, 13, 14], "befor": [10, 14, 16], "finish": 10, "wip": 10, "its": [10, 13], "option": [10, 11, 12, 14, 15, 16], "mark": 10, "draft": 10, "setup": 10, "satisfi": 10, "lint": 10, "top": 10, "directori": 10, "ci": 10, "upon": 10, "find": [10, 15], "pytest": [10, 12], "absent": 11, "modul": 11, "design": 11, "right": [11, 13], "express": [11, 13, 14, 15], "leverag": 11, "overlap": [11, 14], "version": [11, 12, 14, 15, 16], "just": [11, 14], "like": [11, 14, 15, 16], "would": [11, 14, 15, 16], "5000": 11, "param_grid": [11, 15], "logsppac": 11, "cvsearch": 11, "detail": [11, 12, 14, 15], "see": [11, 12, 14, 15, 16], "cd": 12, "sinc": [12, 16], "ship": 12, "osqp": 12, "sc": 12, "eco": 12, "which": [12, 14, 15, 16], "enough": 12, "most": 12, "integ": [12, 14, 15], "quadrat": [12, 14], "program": [12, 14], "formul": 12, "class": [12, 14, 15, 16], "highli": [12, 14], "capabl": 12, "ecos_bb": [12, 14], "slow": [12, 14], "importantli": 12, "recur": [12, 14], "correct": [12, 14, 16], "issu": [12, 14], "section": [12, 14], "directli": [12, 13, 14, 15], "gurobipi": 12, "trial": 12, "small": 12, "grant": [12, 13], "academ": 12, "student": 12, "research": 12, "altern": [12, 14], "interfac": [12, 15], "pyscipopt": 12, "build": 12, "here": [12, 14, 15], "conda": 12, "forg": 12, "channel": 12, "c": [12, 13, 14, 16], "scipopt": 12, "command": 12, "built": 12, "need": [12, 14, 15], "folder": 12, "Then": 12, "distribut": 13, "modifi": 13, "claus": 13, "bsd": 13, "licenc": 13, "copyright": 13, "2022": 13, "regent": 13, "univers": 13, "california": 13, "through": 13, "lawrenc": 13, "berkelei": 13, "nation": 13, "laboratori": 13, "subject": 13, "receipt": 13, "approv": 13, "u": [13, 14, 16], "dept": 13, "reserv": 13, "redistribut": 13, "binari": [13, 15], "modif": 13, "permit": [13, 15], "condit": [13, 14], "met": 13, "retain": [13, 14, 15, 16], "disclaim": 13, "reproduc": 13, "neither": 13, "nor": 13, "contributor": 13, "mai": [13, 14, 16], "endors": 13, "deriv": 13, "softwar": 13, "prior": 13, "permiss": 13, "BY": 13, "THE": 13, "holder": 13, "AND": 13, "AS": 13, "OR": 13, "impli": 13, "warranti": 13, "BUT": 13, "NOT": [13, 15], "limit": 13, "TO": 13, "OF": 13, "merchant": 13, "FOR": 13, "A": [13, 14, 15, 16, 17], "particular": 13, "IN": 13, "NO": 13, "event": 13, "shall": 13, "owner": 13, "BE": 13, "liabl": 13, "direct": 13, "indirect": 13, "incident": 13, "special": 13, "exemplari": 13, "consequenti": 13, "damag": 13, "procur": 13, "substitut": 13, "servic": 13, "loss": 13, "profit": 13, "busi": 13, "interrupt": 13, "caus": 13, "ON": 13, "theori": 13, "liabil": 13, "whether": [13, 14], "contract": 13, "strict": [13, 14], "tort": 13, "neglig": 13, "otherwis": [13, 14, 15, 16], "aris": 13, "out": 13, "IF": 13, "advis": 13, "SUCH": 13, "oblig": 13, "whatsoev": 13, "bug": 13, "patch": 13, "upgrad": 13, "enhanc": 13, "anyon": 13, "choos": [13, 15], "publicli": 13, "impos": 13, "separ": 13, "agreement": 13, "herebi": 13, "exclus": 13, "royalti": 13, "perpetu": 13, "prepar": [13, 14, 16], "work": [13, 14, 15, 16], "incorpor": 13, "sublicens": 13, "thereof": 13, "copy_x": 14, "warm_start": 14, "none": [14, 15, 16, 17], "cvxregressor": 14, "ordinari": 14, "least": [14, 15], "squar": [14, 16], "min_": 14, "2_2": 14, "bool": [14, 15, 16], "intercept": 14, "assum": [14, 15], "center": 14, "copi": 14, "els": 14, "overwritten": 14, "reus": 14, "previou": [14, 16], "initi": [14, 15, 16], "eras": 14, "str": [14, 15, 16], "advanc": 14, "method": [14, 15, 16, 17], "dict": [14, 15], "dictionari": [14, 15, 16], "keyword": [14, 16], "argument": [14, 15, 16], "doc": 14, "link": 14, "inform": [14, 15, 16], "ndarrai": [14, 15], "cost": 14, "formula": 14, "float": [14, 15, 16, 17], "independ": 14, "term": 14, "decis": [14, 15], "canon": 14, "simplenamespac": 14, "namespac": 14, "contain": [14, 15, 16], "hyper": [14, 15, 16], "auxiliari": 14, "reli": 14, "etc": 14, "becaus": [14, 15, 16], "cp": 14, "return": [14, 15, 16, 17], "sample_weight": [14, 15, 16], "arg": [14, 16], "kwarg": [14, 16], "input": [14, 15, 16], "minim": 14, "given": [14, 15, 16], "arraylik": [14, 16, 17], "Will": [14, 16], "cast": [14, 16], "necessari": [14, 16], "n_target": [14, 16], "individu": [14, 16], "default": [14, 15, 16, 17], "posit": [14, 16], "instanc": [14, 15, 16], "self": [14, 15, 16], "preprocess_data": 14, "almost": 14, "further": 14, "control": [14, 15], "preprocess": 14, "kept": 14, "correctli": 14, "rescal": 14, "accordingli": 14, "get_metadata_rout": [14, 15, 16], "metadata": [14, 15, 16], "rout": [14, 15, 16], "check": [14, 15, 16], "user": [14, 15, 16], "guid": [14, 15, 16], "mechan": [14, 15, 16], "metadatarequest": [14, 15, 16], "encapsul": [14, 15, 16], "get_param": [14, 15, 16], "deep": [14, 15, 16], "subobject": [14, 15], "map": [14, 15], "arrai": [14, 15, 16, 17], "determin": [14, 15, 16], "r": [14, 15, 16], "frac": [14, 16], "y_true": [14, 16], "y_pred": [14, 15, 16, 17], "arbitrarili": [14, 16], "wors": [14, 16], "constant": [14, 16], "disregard": [14, 16], "some": [14, 15, 16], "precomput": [14, 16], "kernel": [14, 16], "instead": [14, 15, 16], "n_samples_fit": [14, 16], "number": [14, 15, 16], "n_output": [14, 15, 16], "multioutput": [14, 16], "uniform_averag": [14, 16], "23": [14, 16], "consist": [14, 16], "influenc": [14, 16], "except": [14, 16], "multioutputregressor": [14, 16], "set_fit_request": [14, 15, 16], "relev": [14, 15, 16], "enable_metadata_rout": [14, 15, 16], "set_config": [14, 15, 16], "meta": [14, 15, 16], "rais": [14, 15, 16], "error": [14, 15, 16, 17], "alia": [14, 15, 16], "origin": [14, 15, 16], "util": [14, 15, 16], "metadata_rout": [14, 15, 16], "exist": [14, 15, 16], "sub": [14, 15, 16], "g": [14, 15, 16], "insid": [14, 15, 16], "updat": [14, 15, 16], "set_param": [14, 15, 16], "nest": [14, 15, 16], "latter": [14, 15], "compon": [14, 15], "__": [14, 15], "set_score_request": [14, 16], "_1": 14, "big_m": 14, "hierarchi": [14, 16], "ignore_psd_check": 14, "miqpl0": 14, "miqp": 14, "length": [14, 15], "simpli": 14, "upper": [14, 17], "bound": [14, 17], "associ": 14, "beta_c": 14, "_2": 14, "store": 14, "relat": [14, 15, 16], "between": 14, "sublist": 14, "indic": [14, 15, 16, 17], "element": [14, 15], "depend": 14, "psd": 14, "avoid": [14, 15], "poorli": 14, "But": 14, "scip": 14, "take": 14, "long": 14, "larg": [14, 15], "tikhonov_w": 14, "tikhonovmixin": 14, "tihkonov": 14, "compulsori": 14, "sum_": 14, "z_g": 14, "boolean": 14, "slack": 14, "1d": [14, 15, 17], "distinct": 14, "mixedl0": 14, "discuss": 14, "arxiv": 14, "1807": 14, "10753": 14, "extend": 14, "doi": 14, "1287": 14, "opr": 14, "2015": 14, "1436": 14, "l1": 14, "propos": 14, "2204": 14, "13789": 14, "And": 14, "tikhonov": 14, "wether": 14, "cvxestim": [14, 16], "group_weight": 14, "w_g": 14, "beta_g": 14, "ones": 14, "penalti": 14, "faculti": 14, "washington": 14, "edu": 14, "nrsimon": 14, "standgl": 14, "pdf": 14, "group_list": 14, "accept": 14, "than": [14, 15], "hold": 14, "inner": 14, "belong": 14, "third": 14, "word": 14, "delta": 14, "delta_l": 14, "proper": 14, "lenght": 14, "ment": 14, "hyperparamt": 14, "ep": 14, "06": 14, "tol": 14, "update_funct": 14, "known": 14, "denomin": 14, "absolut": 14, "toler": 14, "success": 14, "callabl": [14, 15], "signatur": 14, "group_norm": 14, "v_g": 14, "w_l": 14, "done": 14, "portion": 14, "beyond": 15, "neg_root_mean_squared_error": 15, "refit": 15, "verbos": 15, "pre_dispatch": 15, "error_scor": 15, "nan": 15, "return_train_scor": 15, "exhaust": 15, "numer": 15, "opt_select": 15, "switch": 15, "current": 15, "maxim": 15, "appli": 15, "instanti": 15, "point": 15, "kei": 15, "parallel": 15, "strategi": 15, "evalu": 15, "string": 15, "uniqu": 15, "contrast": 15, "job": 15, "unless": 15, "joblib": 15, "parallel_backend": 15, "context": 15, "processor": 15, "glossari": 15, "found": 15, "whole": 15, "denot": 15, "scorer": 15, "consider": 15, "best_index_": 15, "accord": 15, "best_score_": 15, "made": 15, "know": 15, "fold": 15, "stratifi": 15, "splitter": 15, "classifi": 15, "multiclass": 15, "stratifiedkfold": 15, "These": 15, "across": 15, "variou": 15, "danger": 15, "intern": 15, "similar": 15, "close": 15, "repeatedkfold": 15, "higher": 15, "messag": 15, "candid": 15, "displai": 15, "togeth": 15, "dispatch": 15, "dure": 15, "reduc": 15, "explos": 15, "memori": 15, "consumpt": 15, "cpu": 15, "process": 15, "immedi": 15, "spawn": 15, "lightweight": 15, "delai": 15, "due": 15, "demand": 15, "exact": 15, "assign": 15, "occur": 15, "fitfailedwarn": 15, "affect": 15, "insight": 15, "impact": 15, "overfit": 15, "underfit": 15, "trade": 15, "off": 15, "strictli": 15, "fit_param": 15, "rel": 15, "classif": 15, "unsupervis": 15, "conjunct": 15, "groupkfold": 15, "whose": 15, "num_sampl": 15, "along": 15, "gridsearch": 15, "classes_": 15, "decision_funct": 15, "fulfil": 15, "assumpt": 15, "y_score": 15, "n_class": 15, "inverse_transform": 15, "xt": 15, "n_features_in_": [15, 16], "seen": 15, "predict_log_proba": 15, "log": 15, "probabl": 15, "predict_proba": 15, "score_sampl": 15, "24": 15, "transform": 15, "space": 15, "n_iter": 15, "basesearchcv": 15, "dimension": 15, "linesearch": 15, "cycl": 15, "practic": 15, "could": 15, "l0_ratio": 15, "piec": 16, "wise": 16, "estimator_feature_indic": 16, "_basecomposit": 16, "regressormixin": 16, "linearmodel": 16, "next": 16, "cannot": 16, "member": 16, "scope": 16, "adjust": 16, "part": 16, "slice": 16, "wrap": 16, "No": 16, "violat": 16, "convent": 16, "therefor": 16, "check_estim": 16, "guarante": 16, "underscor": 16, "rememb": 16, "wish": 16, "_fit": 16, "varieti": 17, "polish": 17, "ce": 17, "high": 17, "low": 17, "decor": 17, "At": 17, "runtim": 17, "fit_method": 17, "definit": 17, "def": 17, "your_fit_method": 17, "convert": 17}, "objects": {"sparselm": [[14, 0, 0, "-", "model"], [15, 0, 0, "-", "model_selection"], [16, 0, 0, "-", "stepwise"], [17, 0, 0, "-", "tools"]], "sparselm.model": [[14, 1, 1, "", "AdaptiveGroupLasso"], [14, 1, 1, "", "AdaptiveLasso"], [14, 1, 1, "", "AdaptiveOverlapGroupLasso"], [14, 1, 1, "", "AdaptiveRidgedGroupLasso"], [14, 1, 1, "", "AdaptiveSparseGroupLasso"], [14, 1, 1, "", "BestSubsetSelection"], [14, 1, 1, "", "GroupLasso"], [14, 1, 1, "", "L1L0"], [14, 1, 1, "", "L2L0"], [14, 1, 1, "", "Lasso"], [14, 1, 1, "", "OrdinaryLeastSquares"], [14, 1, 1, "", "OverlapGroupLasso"], [14, 1, 1, "", "RegularizedL0"], [14, 1, 1, "", "RidgedBestSubsetSelection"], [14, 1, 1, "", "RidgedGroupLasso"], [14, 1, 1, "", "SparseGroupLasso"]], "sparselm.model.AdaptiveGroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveOverlapGroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveRidgedGroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveSparseGroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.BestSubsetSelection": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.GroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.L1L0": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.L2L0": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.Lasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.OrdinaryLeastSquares": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.OverlapGroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.RegularizedL0": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.RidgedBestSubsetSelection": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.RidgedGroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model.SparseGroupLasso": [[14, 2, 1, "", "add_constraints"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "generate_problem"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sparselm.model_selection": [[15, 1, 1, "", "GridSearchCV"], [15, 1, 1, "", "LineSearchCV"]], "sparselm.model_selection.GridSearchCV": [[15, 3, 1, "", "classes_"], [15, 2, 1, "", "decision_function"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "inverse_transform"], [15, 3, 1, "", "n_features_in_"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_log_proba"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "score"], [15, 2, 1, "", "score_samples"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "transform"]], "sparselm.model_selection.LineSearchCV": [[15, 3, 1, "", "classes_"], [15, 2, 1, "", "decision_function"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "inverse_transform"], [15, 3, 1, "", "n_features_in_"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_log_proba"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "score"], [15, 2, 1, "", "score_samples"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "transform"]], "sparselm.stepwise": [[16, 1, 1, "", "StepwiseEstimator"]], "sparselm.stepwise.StepwiseEstimator": [[16, 2, 1, "", "fit"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_score_request"], [16, 4, 1, "", "steps"]], "sparselm.tools": [[17, 5, 1, "", "constrain_coefficients"], [17, 5, 1, "", "r2_score_to_cv_error"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": 0, "exampl": 1, "us": [2, 8], "adapt": 2, "regular": 2, "ad": [3, 10], "solut": 3, "constraint": 3, "spars": [4, 7, 11], "group": 4, "regress": [4, 11], "tune": 5, "hyperparamet": [5, 6], "line": 5, "search": 5, "select": 6, "1": 6, "std": 6, "rule": 6, "recov": 7, "signal": 7, "stepwis": [8, 16], "estim": 8, "comput": 9, "time": 9, "contribut": 10, "bug": 10, "issu": 10, "input": 10, "question": 10, "develop": 10, "guidelin": 10, "code": 10, "linear": 11, "model": [11, 14], "avail": 11, "basic": 11, "usag": 11, "instal": 12, "pypi": 12, "from": 12, "sourc": 12, "miqp": 12, "solver": 12, "gurobi": 12, "scip": 12, "test": 12, "licens": 13, "sparselm": [14, 15, 16, 17], "model_select": 15, "tool": 17}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Examples": [[1, "examples"]], "Using adaptive regularization": [[2, "using-adaptive-regularization"]], "Adding solution constraints": [[3, "adding-solution-constraints"]], "(Sparse) Group regression": [[4, "sparse-group-regression"]], "Tuning hyperparameters with line search": [[5, "tuning-hyperparameters-with-line-search"]], "Hyperparameters selection with 1-std rule": [[6, "hyperparameters-selection-with-1-std-rule"]], "Recovering sparse signals": [[7, "recovering-sparse-signals"]], "Using stepwise estimator": [[8, "using-stepwise-estimator"]], "Computation times": [[9, "computation-times"]], "Contributing": [[10, "contributing"]], "Bugs, issues, input, and questions": [[10, "bugs-issues-input-and-questions"]], "Developing guidelines": [[10, "developing-guidelines"]], "Adding code contributions": [[10, "adding-code-contributions"]], "Sparse Linear Regression Models": [[11, "sparse-linear-regression-models"]], "Available regression models": [[11, "available-regression-models"]], "Basic usage": [[11, "basic-usage"]], "Install": [[12, "install"]], "PyPI": [[12, "pypi"]], "Install from source": [[12, "install-from-source"]], "Installing MIQP solvers": [[12, "installing-miqp-solvers"]], "Gurobi": [[12, "gurobi"]], "SCIP": [[12, "scip"]], "Testing": [[12, "testing"]], "License": [[13, "license"]], "sparselm.model": [[14, "module-sparselm.model"]], "sparselm.model_selection": [[15, "module-sparselm.model_selection"]], "sparselm.stepwise": [[16, "module-sparselm.stepwise"]], "sparselm.tools": [[17, "module-sparselm.tools"]]}, "indexentries": {"adaptivegrouplasso (class in sparselm.model)": [[14, "sparselm.model.AdaptiveGroupLasso"]], "adaptivelasso (class in sparselm.model)": [[14, "sparselm.model.AdaptiveLasso"]], "adaptiveoverlapgrouplasso (class in sparselm.model)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso"]], "adaptiveridgedgrouplasso (class in sparselm.model)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso"]], "adaptivesparsegrouplasso (class in sparselm.model)": [[14, "sparselm.model.AdaptiveSparseGroupLasso"]], "bestsubsetselection (class in sparselm.model)": [[14, "sparselm.model.BestSubsetSelection"]], "grouplasso (class in sparselm.model)": [[14, "sparselm.model.GroupLasso"]], "l1l0 (class in sparselm.model)": [[14, "sparselm.model.L1L0"]], "l2l0 (class in sparselm.model)": [[14, "sparselm.model.L2L0"]], "lasso (class in sparselm.model)": [[14, "sparselm.model.Lasso"]], "ordinaryleastsquares (class in sparselm.model)": [[14, "sparselm.model.OrdinaryLeastSquares"]], "overlapgrouplasso (class in sparselm.model)": [[14, "sparselm.model.OverlapGroupLasso"]], "regularizedl0 (class in sparselm.model)": [[14, "sparselm.model.RegularizedL0"]], "ridgedbestsubsetselection (class in sparselm.model)": [[14, "sparselm.model.RidgedBestSubsetSelection"]], "ridgedgrouplasso (class in sparselm.model)": [[14, "sparselm.model.RidgedGroupLasso"]], "sparsegrouplasso (class in sparselm.model)": [[14, "sparselm.model.SparseGroupLasso"]], "add_constraints() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.add_constraints"]], "add_constraints() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.add_constraints"]], "add_constraints() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.add_constraints"]], "add_constraints() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.add_constraints"]], "add_constraints() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.add_constraints"]], "add_constraints() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.add_constraints"]], "add_constraints() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.add_constraints"]], "add_constraints() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.add_constraints"]], "add_constraints() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.add_constraints"]], "fit() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.fit"]], "fit() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.fit"]], "fit() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.fit"]], "fit() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.fit"]], "fit() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.fit"]], "fit() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.fit"]], "fit() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.fit"]], "fit() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.fit"]], "fit() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.fit"]], "fit() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.fit"]], "fit() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.fit"]], "fit() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.fit"]], "fit() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.fit"]], "fit() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.fit"]], "fit() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.fit"]], "fit() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.fit"]], "generate_problem() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.generate_problem"]], "generate_problem() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.generate_problem"]], "generate_problem() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.generate_problem"]], "generate_problem() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.generate_problem"]], "generate_problem() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.generate_problem"]], "generate_problem() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.generate_problem"]], "generate_problem() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.generate_problem"]], "generate_problem() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.generate_problem"]], "generate_problem() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.generate_problem"]], "get_metadata_routing() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.get_metadata_routing"]], "get_params() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.get_params"]], "get_params() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.get_params"]], "get_params() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.get_params"]], "get_params() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.get_params"]], "get_params() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.get_params"]], "get_params() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.get_params"]], "get_params() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.get_params"]], "get_params() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.get_params"]], "get_params() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.get_params"]], "get_params() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.get_params"]], "get_params() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.get_params"]], "get_params() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.get_params"]], "get_params() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.get_params"]], "get_params() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.get_params"]], "get_params() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.get_params"]], "get_params() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.get_params"]], "module": [[14, "module-sparselm.model"], [15, "module-sparselm.model_selection"], [16, "module-sparselm.stepwise"], [17, "module-sparselm.tools"]], "predict() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.predict"]], "predict() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.predict"]], "predict() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.predict"]], "predict() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.predict"]], "predict() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.predict"]], "predict() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.predict"]], "predict() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.predict"]], "predict() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.predict"]], "predict() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.predict"]], "predict() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.predict"]], "predict() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.predict"]], "predict() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.predict"]], "predict() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.predict"]], "predict() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.predict"]], "predict() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.predict"]], "predict() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.predict"]], "score() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.score"]], "score() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.score"]], "score() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.score"]], "score() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.score"]], "score() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.score"]], "score() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.score"]], "score() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.score"]], "score() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.score"]], "score() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.score"]], "score() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.score"]], "score() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.score"]], "score() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.score"]], "score() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.score"]], "score() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.score"]], "score() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.score"]], "score() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.score"]], "set_fit_request() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.set_fit_request"]], "set_fit_request() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.set_fit_request"]], "set_fit_request() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.set_fit_request"]], "set_fit_request() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.set_fit_request"]], "set_fit_request() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.set_fit_request"]], "set_fit_request() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.set_fit_request"]], "set_fit_request() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.set_fit_request"]], "set_fit_request() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.set_fit_request"]], "set_params() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.set_params"]], "set_params() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.set_params"]], "set_params() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.set_params"]], "set_params() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.set_params"]], "set_params() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.set_params"]], "set_params() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.set_params"]], "set_params() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.set_params"]], "set_params() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.set_params"]], "set_params() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.set_params"]], "set_params() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.set_params"]], "set_params() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.set_params"]], "set_params() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.set_params"]], "set_params() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.set_params"]], "set_params() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.set_params"]], "set_params() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.set_params"]], "set_params() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.set_params"]], "set_score_request() (sparselm.model.adaptivegrouplasso method)": [[14, "sparselm.model.AdaptiveGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptivelasso method)": [[14, "sparselm.model.AdaptiveLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptiveoverlapgrouplasso method)": [[14, "sparselm.model.AdaptiveOverlapGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptiveridgedgrouplasso method)": [[14, "sparselm.model.AdaptiveRidgedGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptivesparsegrouplasso method)": [[14, "sparselm.model.AdaptiveSparseGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.bestsubsetselection method)": [[14, "sparselm.model.BestSubsetSelection.set_score_request"]], "set_score_request() (sparselm.model.grouplasso method)": [[14, "sparselm.model.GroupLasso.set_score_request"]], "set_score_request() (sparselm.model.l1l0 method)": [[14, "sparselm.model.L1L0.set_score_request"]], "set_score_request() (sparselm.model.l2l0 method)": [[14, "sparselm.model.L2L0.set_score_request"]], "set_score_request() (sparselm.model.lasso method)": [[14, "sparselm.model.Lasso.set_score_request"]], "set_score_request() (sparselm.model.ordinaryleastsquares method)": [[14, "sparselm.model.OrdinaryLeastSquares.set_score_request"]], "set_score_request() (sparselm.model.overlapgrouplasso method)": [[14, "sparselm.model.OverlapGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.regularizedl0 method)": [[14, "sparselm.model.RegularizedL0.set_score_request"]], "set_score_request() (sparselm.model.ridgedbestsubsetselection method)": [[14, "sparselm.model.RidgedBestSubsetSelection.set_score_request"]], "set_score_request() (sparselm.model.ridgedgrouplasso method)": [[14, "sparselm.model.RidgedGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.sparsegrouplasso method)": [[14, "sparselm.model.SparseGroupLasso.set_score_request"]], "sparselm.model": [[14, "module-sparselm.model"]], "gridsearchcv (class in sparselm.model_selection)": [[15, "sparselm.model_selection.GridSearchCV"]], "linesearchcv (class in sparselm.model_selection)": [[15, "sparselm.model_selection.LineSearchCV"]], "classes_ (sparselm.model_selection.gridsearchcv property)": [[15, "sparselm.model_selection.GridSearchCV.classes_"]], "classes_ (sparselm.model_selection.linesearchcv property)": [[15, "sparselm.model_selection.LineSearchCV.classes_"]], "decision_function() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.decision_function"]], "decision_function() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.decision_function"]], "fit() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.fit"]], "fit() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.fit"]], "get_metadata_routing() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.get_metadata_routing"]], "get_metadata_routing() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.get_metadata_routing"]], "get_params() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.get_params"]], "get_params() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.get_params"]], "inverse_transform() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.inverse_transform"]], "inverse_transform() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.inverse_transform"]], "n_features_in_ (sparselm.model_selection.gridsearchcv property)": [[15, "sparselm.model_selection.GridSearchCV.n_features_in_"]], "n_features_in_ (sparselm.model_selection.linesearchcv property)": [[15, "sparselm.model_selection.LineSearchCV.n_features_in_"]], "predict() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.predict"]], "predict() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.predict"]], "predict_log_proba() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.predict_log_proba"]], "predict_log_proba() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.predict_log_proba"]], "predict_proba() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.predict_proba"]], "predict_proba() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.predict_proba"]], "score() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.score"]], "score() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.score"]], "score_samples() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.score_samples"]], "score_samples() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.score_samples"]], "set_fit_request() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.set_fit_request"]], "set_fit_request() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.set_fit_request"]], "set_params() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.set_params"]], "set_params() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.set_params"]], "sparselm.model_selection": [[15, "module-sparselm.model_selection"]], "transform() (sparselm.model_selection.gridsearchcv method)": [[15, "sparselm.model_selection.GridSearchCV.transform"]], "transform() (sparselm.model_selection.linesearchcv method)": [[15, "sparselm.model_selection.LineSearchCV.transform"]], "stepwiseestimator (class in sparselm.stepwise)": [[16, "sparselm.stepwise.StepwiseEstimator"]], "fit() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.fit"]], "get_metadata_routing() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.get_metadata_routing"]], "get_params() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.get_params"]], "predict() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.predict"]], "score() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.score"]], "set_fit_request() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.set_fit_request"]], "set_params() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.set_params"]], "set_score_request() (sparselm.stepwise.stepwiseestimator method)": [[16, "sparselm.stepwise.StepwiseEstimator.set_score_request"]], "sparselm.stepwise": [[16, "module-sparselm.stepwise"]], "steps (sparselm.stepwise.stepwiseestimator attribute)": [[16, "sparselm.stepwise.StepwiseEstimator.steps"]], "constrain_coefficients() (in module sparselm.tools)": [[17, "sparselm.tools.constrain_coefficients"]], "r2_score_to_cv_error() (in module sparselm.tools)": [[17, "sparselm.tools.r2_score_to_cv_error"]], "sparselm.tools": [[17, "module-sparselm.tools"]]}})