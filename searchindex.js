Search.setIndex({"docnames": ["api", "changelog", "contributing", "examples", "index", "install", "license", "sparselm.model", "sparselm.model_selection", "sparselm.stepwise", "sparselm.tools"], "filenames": ["api.rst", "changelog.rst", "contributing.rst", "examples.rst", "index.rst", "install.rst", "license.rst", "sparselm.model.rst", "sparselm.model_selection.rst", "sparselm.stepwise.rst", "sparselm.tools.rst"], "titles": ["API Documentation", "&lt;no title&gt;", "Contributing", "Examples", "Sparse Linear Regression Models", "Install", "License", "sparselm.model", "sparselm.model_selection", "sparselm.stepwise", "sparselm.tools"], "terms": {"sparselm": [0, 4, 5], "model": [0, 8, 9, 10], "ordinaryleastsquar": [0, 7], "lasso": [0, 4, 7], "bestsubsetselect": [0, 7], "ridgedbestsubsetselect": [0, 7], "regularizedl0": [0, 7], "l1l0": [0, 4, 7], "l2l0": [0, 4, 7, 8], "grouplasso": [0, 7], "overlapgrouplasso": [0, 7], "sparsegrouplasso": [0, 7], "ridgedgrouplasso": [0, 7], "adaptivelasso": [0, 4, 7], "adaptivegrouplasso": [0, 7], "adaptiveoverlapgrouplasso": [0, 7], "adaptivesparsegrouplasso": [0, 7], "adaptiveridgedgrouplasso": [0, 7], "stepwis": 0, "stepwiseestim": [0, 9], "model_select": [0, 4], "gridsearchcv": [0, 4, 8, 9], "linesearchcv": [0, 8, 9], "tool": 0, "constrain_coeffici": [0, 10], "r2_score_to_cv_error": [0, 10], "we": [2, 8], "welcom": 2, "all": [2, 4, 6, 7, 8, 9], "form": [2, 6, 7, 8], "pleas": 2, "consid": [2, 9], "ani": [2, 4, 6, 7, 9], "wai": [2, 6], "you": [2, 4, 5, 6, 7, 8, 9], "can": [2, 5, 7, 8, 9], "us": [2, 4, 5, 6, 7, 8, 9, 10], "tracker": 2, "share": 2, "follow": [2, 6, 7], "featur": [2, 6, 7, 8, 9], "request": 2, "idea": 2, "have": [2, 7, 8], "report": 2, "save": 2, "i": [2, 4, 6, 7, 8, 9], "veri": [2, 4, 7], "help": [2, 9], "make": [2, 6], "sure": 2, "thei": [2, 9], "ar": [2, 4, 6, 7, 8, 9], "properli": 2, "address": 2, "descript": 2, "neat": 2, "possibl": [2, 6, 7, 8, 9], "when": [2, 7, 8, 9], "open": [2, 7], "up": [2, 8, 9], "an": [2, 7, 8, 9, 10], "If": [2, 4, 7, 8, 9], "written": [2, 6], "want": [2, 7], "start": [2, 8], "write": 2, "new": [2, 8], "think": 2, "improv": 2, "spars": [2, 5, 6, 7, 8, 9], "lm": [2, 4, 5, 6, 8], "step": [2, 7, 8, 9], "below": [2, 10], "should": [2, 7, 8, 9], "unit": [2, 5], "test": [2, 7, 8, 9], "well": [2, 7, 8], "document": [2, 6, 8], "googl": 2, "style": 2, "docstr": 2, "pass": [2, 7, 8, 9], "pre": 2, "commit": 2, "hook": 2, "The": [2, 4, 6, 7, 8, 9, 10], "black": 2, "estim": [2, 4, 7, 8, 9], "scikit": [2, 4, 8, 9], "learn": [2, 4, 8, 9], "": [2, 6, 7, 8, 9], "first": [2, 5, 7, 8, 9], "time": [2, 7, 8], "fork": [2, 5], "repositori": [2, 5], "clone": [2, 5], "your": [2, 6, 8], "local": 2, "workspac": 2, "add": [2, 7], "upstream": 2, "remot": 2, "git": [2, 5], "http": [2, 5, 7], "github": [2, 5], "com": [2, 5], "cedergrouphub": [2, 5], "alwai": [2, 7, 8, 9], "keep": [2, 7, 9, 10], "main": 2, "branch": 2, "date": 2, "Be": 2, "good": [2, 6, 8], "about": [2, 8], "do": [2, 8, 9], "fast": [2, 8], "forward": 2, "merg": 2, "while": [2, 8], "In": [2, 7, 8, 10], "order": [2, 8], "chang": 2, "avail": [2, 6, 8], "without": [2, 6], "re": [2, 7], "instal": [2, 6, 7], "packag": 2, "edit": 2, "mode": [2, 8], "pip": [2, 5], "e": [2, 7, 8], "To": [2, 5], "free": [2, 6], "so": [2, 7, 8], "recommend": [2, 7], "onli": [2, 7, 8, 9], "short": 2, "easi": [2, 4], "fix": [2, 6, 9], "addit": [2, 7, 8], "For": [2, 7, 8, 9], "more": [2, 7, 8], "complex": 2, "try": [2, 8], "name": [2, 6, 7, 8, 9], "feautr": 2, "feel": 2, "pr": 2, "even": [2, 6, 7], "befor": [2, 9], "finish": 2, "wip": 2, "its": [2, 6], "option": [2, 4, 7], "mark": 2, "draft": 2, "setup": 2, "ensur": 2, "satisfi": 2, "lint": 2, "requir": [2, 5, 6, 7, 8, 9], "run": [2, 5, 8], "top": 2, "directori": 2, "format": [2, 8], "go": [2, 9], "ci": 2, "upon": 2, "them": [2, 8, 9], "find": [2, 8], "problem": [2, 4, 7], "pytest": [2, 5], "under": [3, 6, 7], "construct": 3, "includ": [4, 6, 7, 8], "sever": 4, "structur": [4, 8], "absent": 4, "sklearn": [4, 9], "linear_model": 4, "modul": 4, "design": 4, "fit": [4, 6, 7, 8, 9, 10], "right": [4, 6], "lean": 4, "underli": [4, 7, 8], "optim": [4, 7, 8, 9], "express": [4, 6, 7, 8], "solv": [4, 7], "leverag": 4, "cvxpy": [4, 7], "group": [4, 7, 8, 9], "overlap": [4, 7], "ridg": [4, 7], "adapt": [4, 7], "version": [4, 7, 8, 9], "best": [4, 7, 8, 9], "subset": [4, 7], "select": [4, 7, 8, 9], "l0": [4, 7], "paramet": [4, 7, 8, 9, 10], "alreadi": [4, 7], "just": [4, 7], "like": [4, 7, 8, 9], "would": [4, 7, 8, 9], "import": 4, "numpi": 4, "np": [4, 7, 8], "from": [4, 6, 7, 8, 9, 10], "dataset": [4, 8], "make_regress": 4, "x": [4, 7, 8, 9, 10], "y": [4, 7, 8, 9, 10], "n_sampl": [4, 7, 8, 9], "200": 4, "n_featur": [4, 7, 8, 9], "5000": 4, "random_st": 4, "0": [4, 7, 8, 9], "alasso": 4, "fit_intercept": [4, 7], "fals": [4, 7, 8], "param_grid": [4, 8], "alpha": [4, 7, 8], "logsppac": 4, "7": 4, "2": [4, 6, 7, 8, 9], "cvsearch": 4, "print": 4, "best_params_": [4, 8], "cd": 5, "folder": 5, "must": [5, 6, 7, 8, 9], "Then": 5, "distribut": 6, "modifi": 6, "3": [6, 7, 8, 9], "claus": 6, "bsd": 6, "licenc": 6, "copyright": 6, "c": [6, 7, 9], "2022": 6, "regent": 6, "univers": 6, "california": 6, "through": 6, "lawrenc": 6, "berkelei": 6, "nation": 6, "laboratori": 6, "subject": 6, "receipt": 6, "approv": 6, "u": [6, 7, 9], "dept": 6, "energi": 6, "reserv": 6, "redistribut": 6, "sourc": [6, 7, 8, 9, 10], "binari": [6, 8], "modif": 6, "permit": [6, 8], "provid": [6, 8], "condit": [6, 7], "met": 6, "1": [6, 7, 8, 9, 10], "code": 6, "retain": 6, "abov": [6, 7], "notic": [6, 8, 9], "thi": [6, 7, 8, 9, 10], "list": [6, 7, 8, 9, 10], "disclaim": 6, "reproduc": 6, "other": [6, 7, 8, 9], "materi": 6, "neither": 6, "nor": 6, "contributor": 6, "mai": [6, 7, 9], "endors": 6, "promot": 6, "product": 6, "deriv": 6, "softwar": 6, "specif": [6, 8], "prior": 6, "permiss": 6, "BY": 6, "THE": 6, "holder": 6, "AND": 6, "AS": 6, "OR": 6, "impli": 6, "warranti": 6, "BUT": 6, "NOT": [6, 8], "limit": 6, "TO": 6, "OF": 6, "merchant": 6, "FOR": 6, "A": [6, 7, 8, 9, 10], "particular": 6, "purpos": 6, "IN": 6, "NO": 6, "event": 6, "shall": 6, "owner": 6, "BE": 6, "liabl": 6, "direct": 6, "indirect": 6, "incident": 6, "special": 6, "exemplari": 6, "consequenti": 6, "damag": 6, "procur": 6, "substitut": 6, "servic": 6, "loss": 6, "data": [6, 7, 8, 9], "profit": 6, "busi": 6, "interrupt": 6, "howev": [6, 7, 8], "caus": 6, "ON": 6, "theori": 6, "liabil": 6, "whether": [6, 7], "contract": 6, "strict": [6, 7], "tort": 6, "neglig": 6, "otherwis": [6, 7, 8], "aris": 6, "out": 6, "IF": 6, "advis": 6, "SUCH": 6, "oblig": 6, "whatsoev": 6, "bug": 6, "patch": 6, "upgrad": 6, "function": [6, 7, 8], "perform": [6, 8], "enhanc": 6, "anyon": 6, "choos": [6, 8], "either": [6, 8, 9], "publicli": 6, "directli": [6, 7, 8], "impos": 6, "separ": 6, "agreement": 6, "herebi": 6, "grant": 6, "non": [6, 8], "exclus": 6, "royalti": 6, "perpetu": 6, "prepar": [6, 7, 9], "work": [6, 7, 8], "incorpor": 6, "comput": [6, 8], "sublicens": 6, "thereof": 6, "class": [7, 8, 9], "implement": [7, 8], "gener": [7, 8, 9], "linear": [7, 9, 10], "regress": [7, 8, 10], "regressor": [7, 9], "copy_x": 7, "true": [7, 8, 9], "warm_start": 7, "solver": 7, "none": [7, 8, 9, 10], "solver_opt": 7, "base": [7, 8, 9], "cvxregressor": 7, "ordinari": 7, "least": [7, 8], "squar": [7, 8, 9], "object": [7, 8, 9], "min_": 7, "beta": 7, "2_2": 7, "bool": [7, 8, 9], "intercept": 7, "assum": [7, 8], "center": 7, "copi": 7, "els": 7, "overwritten": 7, "set": [7, 8, 9], "reus": 7, "solut": 7, "previou": [7, 9], "call": [7, 8, 9], "initi": [7, 8, 9], "eras": 7, "str": [7, 8, 9], "backend": 7, "support": [7, 8], "here": [7, 8], "www": 7, "org": 7, "tutori": 7, "advanc": 7, "index": [7, 8], "html": 7, "method": [7, 8, 9, 10], "dict": [7, 8], "dictionari": [7, 8, 9], "keyword": [7, 9], "argument": [7, 8, 9], "see": [7, 8], "doc": 7, "link": 7, "inform": 7, "variabl": [7, 8], "coef": [7, 10], "ndarrai": [7, 8], "vector": [7, 8, 9, 10], "cost": 7, "formula": 7, "shape": [7, 8, 9], "float": [7, 8, 9, 10], "independ": 7, "term": 7, "decis": [7, 8], "canon": 7, "simplenamespac": 7, "namespac": 7, "contain": [7, 8, 9, 10], "defin": [7, 8, 9], "correspond": [7, 8, 9], "coef_": 7, "attribut": [7, 8], "hyper": [7, 8, 9], "auxiliari": 7, "constraint": 7, "sample_weight": [7, 8, 9], "arg": [7, 9], "kwarg": [7, 9], "coeffici": [7, 9, 10], "input": [7, 8, 9], "repres": [7, 8], "minim": 7, "given": [7, 8], "arraylik": [7, 9, 10], "train": [7, 8, 9], "target": [7, 8, 9, 10], "valu": [7, 8, 9, 10], "Will": [7, 9], "cast": [7, 9], "dtype": [7, 9], "necessari": [7, 9], "n_target": [7, 9], "individu": [7, 9], "weight": [7, 9, 10], "each": [7, 8, 9, 10], "sampl": [7, 8, 9, 10], "default": [7, 8, 9, 10], "posit": [7, 9, 10], "return": [7, 8, 9, 10], "instanc": [7, 8, 9], "self": [7, 8, 9], "generate_problem": 7, "almost": 7, "further": 7, "control": [7, 8], "over": [7, 8], "need": [7, 8], "access": 7, "canonicals_": 7, "exampl": [7, 8, 9], "covari": 7, "matrix": [7, 8, 9], "type": [7, 8, 9, 10], "get_param": [7, 8, 9], "deep": [7, 8, 9], "get": [7, 8, 9], "subobject": [7, 8], "param": [7, 8, 9], "map": [7, 8], "predict": [7, 8, 9], "arrai": [7, 8, 9, 10], "score": [7, 8, 9, 10], "determin": [7, 8, 9], "r": [7, 8, 9], "frac": [7, 9], "v": [7, 9], "where": [7, 8, 9], "residu": [7, 9], "sum": [7, 9], "y_true": [7, 9], "y_pred": [7, 8, 9, 10], "total": [7, 8, 9], "mean": [7, 8, 9], "neg": [7, 8, 9], "becaus": [7, 8, 9], "arbitrarili": [7, 9], "wors": [7, 9], "constant": [7, 9, 10], "expect": [7, 9], "disregard": [7, 9], "some": [7, 9], "precomput": [7, 9], "kernel": [7, 9], "instead": [7, 8, 9], "n_samples_fit": [7, 9], "number": [7, 8, 9], "n_output": [7, 8, 9], "wrt": [7, 9], "note": [7, 9], "multioutput": [7, 9], "uniform_averag": [7, 9], "23": [7, 9], "consist": [7, 9], "r2_score": [7, 8, 9], "influenc": [7, 9], "except": [7, 9], "multioutputregressor": [7, 9], "set_param": [7, 8, 9], "simpl": [7, 8], "nest": [7, 8, 9], "pipelin": [7, 8], "latter": [7, 8], "compon": [7, 8], "__": [7, 8], "updat": [7, 8], "regular": 7, "_1": 7, "sparse_bound": 7, "100": 7, "big_m": 7, "hierarchi": [7, 9], "ignore_psd_check": 7, "miqpl0": 7, "miqp": 7, "allow": [7, 8, 9], "integ": [7, 8], "specifi": [7, 8, 9, 10], "length": [7, 8], "same": [7, 8], "entri": 7, "simpli": 7, "differ": [7, 8], "rang": [7, 10], "int": [7, 8, 9], "upper": [7, 10], "bound": [7, 10], "sparsiti": 7, "nonzero": 7, "norm": 7, "associ": 7, "cluster": [7, 8, 10], "beta_c": 7, "_2": 7, "store": 7, "relat": [7, 8, 9], "between": 7, "sublist": 7, "indic": [7, 8, 9, 10], "which": [7, 8, 9], "element": [7, 8], "depend": 7, "ha": [7, 8, 9], "ignor": 7, "psd": 7, "check": [7, 9], "quadrat": 7, "avoid": [7, 8], "rais": [7, 8], "error": [7, 8, 10], "poorli": 7, "matric": 7, "But": 7, "gurobi": 7, "highli": 7, "altern": 7, "scip": 7, "ecos_bb": 7, "also": [7, 8, 9], "slow": 7, "recur": 7, "correct": [7, 9], "issu": 7, "mix": 7, "program": 7, "section": 7, "take": 7, "long": 7, "converg": 7, "larg": [7, 8], "eta": 7, "tikhonov_w": 7, "tikhonovmixin": 7, "tihkonov": 7, "l2": 7, "level": 7, "compulsori": 7, "sum_": 7, "g": [7, 8], "z_g": 7, "boolean": 7, "slack": 7, "1d": [7, 8, 10], "distinct": 7, "ie": 7, "len": [7, 8], "creat": [7, 8], "singleton": 7, "pseudo": 7, "mixedl0": 7, "discuss": 7, "arxiv": 7, "ab": 7, "1807": 7, "10753": 7, "extend": 7, "describ": 7, "doi": 7, "10": 7, "1287": 7, "opr": 7, "2015": 7, "1436": 7, "l1": 7, "standard": [7, 8, 10], "usual": 7, "propos": 7, "2204": 7, "13789": 7, "And": 7, "w": [7, 8], "tikhonov": 7, "wether": 7, "cvxestim": [7, 9], "group_weight": 7, "w_g": 7, "beta_g": 7, "sqrt": 7, "size": 7, "equal": [7, 8], "ones": 7, "penalti": 7, "refer": [7, 8], "faculti": 7, "washington": 7, "edu": 7, "nrsimon": 7, "standgl": 7, "pdf": 7, "group_list": 7, "accept": 7, "than": [7, 8], "one": [7, 8], "hold": 7, "inner": 7, "belong": 7, "second": [7, 8], "third": 7, "word": 7, "l1_ratio": 7, "5": [7, 8], "ratio": 7, "delta": 7, "delta_l": 7, "detail": [7, 8], "proper": 7, "lenght": 7, "ment": 7, "hyperparamt": 7, "max_it": 7, "ep": 7, "1e": 7, "06": 7, "tol": 7, "update_funct": 7, "known": 7, "iter": [7, 8], "t": [7, 8], "maximum": [7, 8], "denomin": 7, "absolut": 7, "toler": 7, "success": 7, "callabl": [7, 8], "signatur": 7, "f": 7, "group_norm": 7, "v_g": 7, "w_l": 7, "done": 7, "portion": 7, "beyond": 8, "opt_selection_method": 8, "max_scor": 8, "neg_root_mean_squared_error": 8, "n_job": 8, "refit": 8, "cv": [8, 10], "verbos": 8, "pre_dispatch": 8, "error_scor": 8, "nan": 8, "return_train_scor": 8, "exhaust": 8, "search": [8, 9], "rule": 8, "numer": 8, "robust": 8, "sparc": 8, "opt_select": 8, "ad": 8, "switch": 8, "current": 8, "maxim": 8, "one_std_scor": 8, "appli": 8, "instanti": 8, "grid": 8, "point": 8, "interfac": 8, "kei": 8, "multipl": 8, "parallel": 8, "tupl": [8, 9], "strategi": 8, "evalu": 8, "cross": [8, 10], "valid": [8, 10], "singl": 8, "string": 8, "metric": 8, "uniqu": 8, "expans": [8, 10], "convent": [8, 9], "analyz": 8, "present": 8, "root": 8, "compar": 8, "job": 8, "unless": 8, "joblib": 8, "parallel_backend": 8, "context": 8, "processor": 8, "glossari": 8, "found": 8, "whole": 8, "denot": 8, "scorer": 8, "end": [8, 9], "consider": 8, "best_index_": 8, "cv_results_": 8, "case": 8, "best_estimator_": 8, "accord": 8, "best_score_": 8, "made": 8, "know": 8, "split": 8, "fold": 8, "stratifi": 8, "kfold": 8, "splitter": 8, "yield": 8, "classifi": 8, "multiclass": 8, "stratifiedkfold": 8, "These": 8, "shuffl": 8, "across": 8, "user": 8, "guid": 8, "variou": 8, "danger": 8, "intern": 8, "similar": 8, "composit": [8, 9], "close": 8, "row": 8, "repeatedkfold": 8, "higher": 8, "messag": 8, "candid": 8, "displai": 8, "togeth": 8, "dispatch": 8, "dure": 8, "execut": 8, "reduc": 8, "explos": 8, "memori": 8, "consumpt": 8, "cpu": 8, "process": 8, "immedi": 8, "spawn": 8, "lightweight": 8, "delai": 8, "due": 8, "demand": 8, "give": 8, "exact": 8, "assign": 8, "occur": 8, "fitfailedwarn": 8, "doe": 8, "affect": 8, "insight": 8, "how": 8, "impact": 8, "overfit": 8, "underfit": 8, "trade": 8, "off": 8, "computation": 8, "expens": 8, "strictli": 8, "fit_param": 8, "rel": 8, "classif": 8, "unsupervis": 8, "label": 8, "conjunct": 8, "groupkfold": 8, "whose": 8, "num_sampl": 8, "along": 8, "gridsearch": 8, "properti": 8, "classes_": 8, "decision_funct": 8, "fulfil": 8, "assumpt": 8, "y_score": 8, "result": 8, "n_class": 8, "inverse_transform": 8, "xt": 8, "n_features_in_": [8, 9], "seen": 8, "predict_log_proba": 8, "log": 8, "probabl": 8, "predict_proba": 8, "been": 8, "score_sampl": 8, "24": 8, "transform": 8, "space": 8, "n_iter": 8, "basesearchcv": 8, "line": 8, "dimension": 8, "certain": [8, 9], "linesearch": 8, "cycl": 8, "practic": 8, "could": 8, "l0_ratio": 8, "respect": 8, "One": 8, "scan": 8, "piec": 9, "wise": 9, "estimator_feature_indic": 9, "_basecomposit": 9, "regressormixin": 9, "linearmodel": 9, "rest": 9, "next": 9, "cannot": 9, "member": 9, "scope": 9, "adjust": 9, "part": 9, "slice": 9, "origin": 9, "4": 9, "fulli": 9, "respons": 9, "wrap": 9, "No": 9, "sinc": 9, "violat": 9, "therefor": 9, "check_estim": 9, "guarante": 9, "compat": 9, "sub": 9, "underscor": 9, "rememb": 9, "wish": 9, "_fit": 9, "varieti": 10, "polish": 10, "ce": 10, "high": 10, "low": 10, "constrain": 10, "within": 10, "decor": 10, "enforc": 10, "ewaldterm": 10, "dielectr": 10, "suppli": 10, "At": 10, "runtim": 10, "fit_method": 10, "definit": 10, "def": 10, "your_fit_method": 10, "lower": 10, "convert": 10, "r2": 10, "obtain": 10}, "objects": {"sparselm": [[7, 0, 0, "-", "model"], [8, 0, 0, "-", "model_selection"], [9, 0, 0, "-", "stepwise"], [10, 0, 0, "-", "tools"]], "sparselm.model": [[7, 1, 1, "", "AdaptiveGroupLasso"], [7, 1, 1, "", "AdaptiveLasso"], [7, 1, 1, "", "AdaptiveOverlapGroupLasso"], [7, 1, 1, "", "AdaptiveRidgedGroupLasso"], [7, 1, 1, "", "AdaptiveSparseGroupLasso"], [7, 1, 1, "", "BestSubsetSelection"], [7, 1, 1, "", "GroupLasso"], [7, 1, 1, "", "L1L0"], [7, 1, 1, "", "L2L0"], [7, 1, 1, "", "Lasso"], [7, 1, 1, "", "OrdinaryLeastSquares"], [7, 1, 1, "", "OverlapGroupLasso"], [7, 1, 1, "", "RegularizedL0"], [7, 1, 1, "", "RidgedBestSubsetSelection"], [7, 1, 1, "", "RidgedGroupLasso"], [7, 1, 1, "", "SparseGroupLasso"]], "sparselm.model.AdaptiveGroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.AdaptiveLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.AdaptiveOverlapGroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.AdaptiveRidgedGroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.AdaptiveSparseGroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.BestSubsetSelection": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.GroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.L1L0": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.L2L0": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.Lasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.OrdinaryLeastSquares": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.OverlapGroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.RegularizedL0": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.RidgedBestSubsetSelection": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.RidgedGroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model.SparseGroupLasso": [[7, 2, 1, "", "fit"], [7, 2, 1, "", "generate_problem"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sparselm.model_selection": [[8, 1, 1, "", "GridSearchCV"], [8, 1, 1, "", "LineSearchCV"]], "sparselm.model_selection.GridSearchCV": [[8, 3, 1, "", "classes_"], [8, 2, 1, "", "decision_function"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "inverse_transform"], [8, 3, 1, "", "n_features_in_"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_log_proba"], [8, 2, 1, "", "predict_proba"], [8, 2, 1, "", "score"], [8, 2, 1, "", "score_samples"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "transform"]], "sparselm.model_selection.LineSearchCV": [[8, 3, 1, "", "classes_"], [8, 2, 1, "", "decision_function"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "inverse_transform"], [8, 3, 1, "", "n_features_in_"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_log_proba"], [8, 2, 1, "", "predict_proba"], [8, 2, 1, "", "score"], [8, 2, 1, "", "score_samples"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "transform"]], "sparselm.stepwise": [[9, 1, 1, "", "StepwiseEstimator"]], "sparselm.stepwise.StepwiseEstimator": [[9, 2, 1, "", "fit"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "score"], [9, 2, 1, "", "set_params"], [9, 4, 1, "", "steps"]], "sparselm.tools": [[10, 5, 1, "", "constrain_coefficients"], [10, 5, 1, "", "r2_score_to_cv_error"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": 0, "contribut": 2, "bug": 2, "issu": 2, "input": 2, "question": 2, "develop": 2, "guidelin": 2, "ad": 2, "code": 2, "exampl": 3, "spars": 4, "linear": 4, "regress": 4, "model": [4, 7], "avail": 4, "basic": 4, "usag": 4, "instal": 5, "pypi": 5, "from": 5, "sourc": 5, "test": 5, "licens": 6, "sparselm": [7, 8, 9, 10], "model_select": 8, "stepwis": 9, "tool": 10}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Contributing": [[2, "contributing"]], "Bugs, issues, input, and questions": [[2, "bugs-issues-input-and-questions"]], "Developing guidelines": [[2, "developing-guidelines"]], "Adding code contributions": [[2, "adding-code-contributions"]], "Examples": [[3, "examples"]], "Sparse Linear Regression Models": [[4, "sparse-linear-regression-models"]], "Available regression models": [[4, "available-regression-models"]], "Basic usage": [[4, "basic-usage"]], "Install": [[5, "install"]], "PyPI": [[5, "pypi"]], "Install from source": [[5, "install-from-source"]], "Testing": [[5, "testing"]], "License": [[6, "license"]], "sparselm.model": [[7, "module-sparselm.model"]], "sparselm.model_selection": [[8, "module-sparselm.model_selection"]], "sparselm.stepwise": [[9, "module-sparselm.stepwise"]], "sparselm.tools": [[10, "module-sparselm.tools"]]}, "indexentries": {"adaptivegrouplasso (class in sparselm.model)": [[7, "sparselm.model.AdaptiveGroupLasso"]], "adaptivelasso (class in sparselm.model)": [[7, "sparselm.model.AdaptiveLasso"]], "adaptiveoverlapgrouplasso (class in sparselm.model)": [[7, "sparselm.model.AdaptiveOverlapGroupLasso"]], "adaptiveridgedgrouplasso (class in sparselm.model)": [[7, "sparselm.model.AdaptiveRidgedGroupLasso"]], "adaptivesparsegrouplasso (class in sparselm.model)": [[7, "sparselm.model.AdaptiveSparseGroupLasso"]], "bestsubsetselection (class in sparselm.model)": [[7, "sparselm.model.BestSubsetSelection"]], "grouplasso (class in sparselm.model)": [[7, "sparselm.model.GroupLasso"]], "l1l0 (class in sparselm.model)": [[7, "sparselm.model.L1L0"]], "l2l0 (class in sparselm.model)": [[7, "sparselm.model.L2L0"]], "lasso (class in sparselm.model)": [[7, "sparselm.model.Lasso"]], "ordinaryleastsquares (class in sparselm.model)": [[7, "sparselm.model.OrdinaryLeastSquares"]], "overlapgrouplasso (class in sparselm.model)": [[7, "sparselm.model.OverlapGroupLasso"]], "regularizedl0 (class in sparselm.model)": [[7, "sparselm.model.RegularizedL0"]], "ridgedbestsubsetselection (class in sparselm.model)": [[7, "sparselm.model.RidgedBestSubsetSelection"]], "ridgedgrouplasso (class in sparselm.model)": [[7, "sparselm.model.RidgedGroupLasso"]], "sparsegrouplasso (class in sparselm.model)": [[7, "sparselm.model.SparseGroupLasso"]], "fit() (sparselm.model.adaptivegrouplasso method)": [[7, "sparselm.model.AdaptiveGroupLasso.fit"]], "fit() (sparselm.model.adaptivelasso method)": [[7, "sparselm.model.AdaptiveLasso.fit"]], "fit() (sparselm.model.adaptiveoverlapgrouplasso method)": [[7, "sparselm.model.AdaptiveOverlapGroupLasso.fit"]], "fit() (sparselm.model.adaptiveridgedgrouplasso method)": [[7, "sparselm.model.AdaptiveRidgedGroupLasso.fit"]], "fit() (sparselm.model.adaptivesparsegrouplasso method)": [[7, "sparselm.model.AdaptiveSparseGroupLasso.fit"]], "fit() (sparselm.model.bestsubsetselection method)": [[7, "sparselm.model.BestSubsetSelection.fit"]], "fit() (sparselm.model.grouplasso method)": [[7, "sparselm.model.GroupLasso.fit"]], "fit() (sparselm.model.l1l0 method)": [[7, "sparselm.model.L1L0.fit"]], "fit() (sparselm.model.l2l0 method)": [[7, "sparselm.model.L2L0.fit"]], "fit() (sparselm.model.lasso method)": [[7, "sparselm.model.Lasso.fit"]], "fit() (sparselm.model.ordinaryleastsquares method)": [[7, "sparselm.model.OrdinaryLeastSquares.fit"]], "fit() (sparselm.model.overlapgrouplasso method)": [[7, "sparselm.model.OverlapGroupLasso.fit"]], "fit() (sparselm.model.regularizedl0 method)": [[7, "sparselm.model.RegularizedL0.fit"]], "fit() (sparselm.model.ridgedbestsubsetselection method)": [[7, "sparselm.model.RidgedBestSubsetSelection.fit"]], "fit() (sparselm.model.ridgedgrouplasso method)": [[7, "sparselm.model.RidgedGroupLasso.fit"]], "fit() (sparselm.model.sparsegrouplasso method)": [[7, "sparselm.model.SparseGroupLasso.fit"]], "generate_problem() (sparselm.model.adaptivegrouplasso method)": [[7, "sparselm.model.AdaptiveGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptivelasso method)": [[7, "sparselm.model.AdaptiveLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptiveoverlapgrouplasso method)": [[7, "sparselm.model.AdaptiveOverlapGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptiveridgedgrouplasso method)": [[7, "sparselm.model.AdaptiveRidgedGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptivesparsegrouplasso method)": [[7, "sparselm.model.AdaptiveSparseGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.bestsubsetselection method)": [[7, "sparselm.model.BestSubsetSelection.generate_problem"]], "generate_problem() (sparselm.model.grouplasso method)": [[7, "sparselm.model.GroupLasso.generate_problem"]], "generate_problem() (sparselm.model.l1l0 method)": [[7, "sparselm.model.L1L0.generate_problem"]], "generate_problem() (sparselm.model.l2l0 method)": [[7, "sparselm.model.L2L0.generate_problem"]], "generate_problem() (sparselm.model.lasso method)": [[7, "sparselm.model.Lasso.generate_problem"]], "generate_problem() (sparselm.model.ordinaryleastsquares method)": [[7, "sparselm.model.OrdinaryLeastSquares.generate_problem"]], "generate_problem() (sparselm.model.overlapgrouplasso method)": [[7, "sparselm.model.OverlapGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.regularizedl0 method)": [[7, "sparselm.model.RegularizedL0.generate_problem"]], "generate_problem() (sparselm.model.ridgedbestsubsetselection method)": [[7, "sparselm.model.RidgedBestSubsetSelection.generate_problem"]], "generate_problem() (sparselm.model.ridgedgrouplasso method)": [[7, "sparselm.model.RidgedGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.sparsegrouplasso method)": [[7, "sparselm.model.SparseGroupLasso.generate_problem"]], "get_params() (sparselm.model.adaptivegrouplasso method)": [[7, "sparselm.model.AdaptiveGroupLasso.get_params"]], "get_params() (sparselm.model.adaptivelasso method)": [[7, "sparselm.model.AdaptiveLasso.get_params"]], "get_params() (sparselm.model.adaptiveoverlapgrouplasso method)": [[7, "sparselm.model.AdaptiveOverlapGroupLasso.get_params"]], "get_params() (sparselm.model.adaptiveridgedgrouplasso method)": [[7, "sparselm.model.AdaptiveRidgedGroupLasso.get_params"]], "get_params() (sparselm.model.adaptivesparsegrouplasso method)": [[7, "sparselm.model.AdaptiveSparseGroupLasso.get_params"]], "get_params() (sparselm.model.bestsubsetselection method)": [[7, "sparselm.model.BestSubsetSelection.get_params"]], "get_params() (sparselm.model.grouplasso method)": [[7, "sparselm.model.GroupLasso.get_params"]], "get_params() (sparselm.model.l1l0 method)": [[7, "sparselm.model.L1L0.get_params"]], "get_params() (sparselm.model.l2l0 method)": [[7, "sparselm.model.L2L0.get_params"]], "get_params() (sparselm.model.lasso method)": [[7, "sparselm.model.Lasso.get_params"]], "get_params() (sparselm.model.ordinaryleastsquares method)": [[7, "sparselm.model.OrdinaryLeastSquares.get_params"]], "get_params() (sparselm.model.overlapgrouplasso method)": [[7, "sparselm.model.OverlapGroupLasso.get_params"]], "get_params() (sparselm.model.regularizedl0 method)": [[7, "sparselm.model.RegularizedL0.get_params"]], "get_params() (sparselm.model.ridgedbestsubsetselection method)": [[7, "sparselm.model.RidgedBestSubsetSelection.get_params"]], "get_params() (sparselm.model.ridgedgrouplasso method)": [[7, "sparselm.model.RidgedGroupLasso.get_params"]], "get_params() (sparselm.model.sparsegrouplasso method)": [[7, "sparselm.model.SparseGroupLasso.get_params"]], "module": [[7, "module-sparselm.model"], [8, "module-sparselm.model_selection"], [9, "module-sparselm.stepwise"], [10, "module-sparselm.tools"]], "predict() (sparselm.model.adaptivegrouplasso method)": [[7, "sparselm.model.AdaptiveGroupLasso.predict"]], "predict() (sparselm.model.adaptivelasso method)": [[7, "sparselm.model.AdaptiveLasso.predict"]], "predict() (sparselm.model.adaptiveoverlapgrouplasso method)": [[7, "sparselm.model.AdaptiveOverlapGroupLasso.predict"]], "predict() (sparselm.model.adaptiveridgedgrouplasso method)": [[7, "sparselm.model.AdaptiveRidgedGroupLasso.predict"]], "predict() (sparselm.model.adaptivesparsegrouplasso method)": [[7, "sparselm.model.AdaptiveSparseGroupLasso.predict"]], "predict() (sparselm.model.bestsubsetselection method)": [[7, "sparselm.model.BestSubsetSelection.predict"]], "predict() (sparselm.model.grouplasso method)": [[7, "sparselm.model.GroupLasso.predict"]], "predict() (sparselm.model.l1l0 method)": [[7, "sparselm.model.L1L0.predict"]], "predict() (sparselm.model.l2l0 method)": [[7, "sparselm.model.L2L0.predict"]], "predict() (sparselm.model.lasso method)": [[7, "sparselm.model.Lasso.predict"]], "predict() (sparselm.model.ordinaryleastsquares method)": [[7, "sparselm.model.OrdinaryLeastSquares.predict"]], "predict() (sparselm.model.overlapgrouplasso method)": [[7, "sparselm.model.OverlapGroupLasso.predict"]], "predict() (sparselm.model.regularizedl0 method)": [[7, "sparselm.model.RegularizedL0.predict"]], "predict() (sparselm.model.ridgedbestsubsetselection method)": [[7, "sparselm.model.RidgedBestSubsetSelection.predict"]], "predict() (sparselm.model.ridgedgrouplasso method)": [[7, "sparselm.model.RidgedGroupLasso.predict"]], "predict() (sparselm.model.sparsegrouplasso method)": [[7, "sparselm.model.SparseGroupLasso.predict"]], "score() (sparselm.model.adaptivegrouplasso method)": [[7, "sparselm.model.AdaptiveGroupLasso.score"]], "score() (sparselm.model.adaptivelasso method)": [[7, "sparselm.model.AdaptiveLasso.score"]], "score() (sparselm.model.adaptiveoverlapgrouplasso method)": [[7, "sparselm.model.AdaptiveOverlapGroupLasso.score"]], "score() (sparselm.model.adaptiveridgedgrouplasso method)": [[7, "sparselm.model.AdaptiveRidgedGroupLasso.score"]], "score() (sparselm.model.adaptivesparsegrouplasso method)": [[7, "sparselm.model.AdaptiveSparseGroupLasso.score"]], "score() (sparselm.model.bestsubsetselection method)": [[7, "sparselm.model.BestSubsetSelection.score"]], "score() (sparselm.model.grouplasso method)": [[7, "sparselm.model.GroupLasso.score"]], "score() (sparselm.model.l1l0 method)": [[7, "sparselm.model.L1L0.score"]], "score() (sparselm.model.l2l0 method)": [[7, "sparselm.model.L2L0.score"]], "score() (sparselm.model.lasso method)": [[7, "sparselm.model.Lasso.score"]], "score() (sparselm.model.ordinaryleastsquares method)": [[7, "sparselm.model.OrdinaryLeastSquares.score"]], "score() (sparselm.model.overlapgrouplasso method)": [[7, "sparselm.model.OverlapGroupLasso.score"]], "score() (sparselm.model.regularizedl0 method)": [[7, "sparselm.model.RegularizedL0.score"]], "score() (sparselm.model.ridgedbestsubsetselection method)": [[7, "sparselm.model.RidgedBestSubsetSelection.score"]], "score() (sparselm.model.ridgedgrouplasso method)": [[7, "sparselm.model.RidgedGroupLasso.score"]], "score() (sparselm.model.sparsegrouplasso method)": [[7, "sparselm.model.SparseGroupLasso.score"]], "set_params() (sparselm.model.adaptivegrouplasso method)": [[7, "sparselm.model.AdaptiveGroupLasso.set_params"]], "set_params() (sparselm.model.adaptivelasso method)": [[7, "sparselm.model.AdaptiveLasso.set_params"]], "set_params() (sparselm.model.adaptiveoverlapgrouplasso method)": [[7, "sparselm.model.AdaptiveOverlapGroupLasso.set_params"]], "set_params() (sparselm.model.adaptiveridgedgrouplasso method)": [[7, "sparselm.model.AdaptiveRidgedGroupLasso.set_params"]], "set_params() (sparselm.model.adaptivesparsegrouplasso method)": [[7, "sparselm.model.AdaptiveSparseGroupLasso.set_params"]], "set_params() (sparselm.model.bestsubsetselection method)": [[7, "sparselm.model.BestSubsetSelection.set_params"]], "set_params() (sparselm.model.grouplasso method)": [[7, "sparselm.model.GroupLasso.set_params"]], "set_params() (sparselm.model.l1l0 method)": [[7, "sparselm.model.L1L0.set_params"]], "set_params() (sparselm.model.l2l0 method)": [[7, "sparselm.model.L2L0.set_params"]], "set_params() (sparselm.model.lasso method)": [[7, "sparselm.model.Lasso.set_params"]], "set_params() (sparselm.model.ordinaryleastsquares method)": [[7, "sparselm.model.OrdinaryLeastSquares.set_params"]], "set_params() (sparselm.model.overlapgrouplasso method)": [[7, "sparselm.model.OverlapGroupLasso.set_params"]], "set_params() (sparselm.model.regularizedl0 method)": [[7, "sparselm.model.RegularizedL0.set_params"]], "set_params() (sparselm.model.ridgedbestsubsetselection method)": [[7, "sparselm.model.RidgedBestSubsetSelection.set_params"]], "set_params() (sparselm.model.ridgedgrouplasso method)": [[7, "sparselm.model.RidgedGroupLasso.set_params"]], "set_params() (sparselm.model.sparsegrouplasso method)": [[7, "sparselm.model.SparseGroupLasso.set_params"]], "sparselm.model": [[7, "module-sparselm.model"]], "gridsearchcv (class in sparselm.model_selection)": [[8, "sparselm.model_selection.GridSearchCV"]], "linesearchcv (class in sparselm.model_selection)": [[8, "sparselm.model_selection.LineSearchCV"]], "classes_ (sparselm.model_selection.gridsearchcv property)": [[8, "sparselm.model_selection.GridSearchCV.classes_"]], "classes_ (sparselm.model_selection.linesearchcv property)": [[8, "sparselm.model_selection.LineSearchCV.classes_"]], "decision_function() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.decision_function"]], "decision_function() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.decision_function"]], "fit() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.fit"]], "fit() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.fit"]], "get_params() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.get_params"]], "get_params() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.get_params"]], "inverse_transform() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.inverse_transform"]], "inverse_transform() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.inverse_transform"]], "n_features_in_ (sparselm.model_selection.gridsearchcv property)": [[8, "sparselm.model_selection.GridSearchCV.n_features_in_"]], "n_features_in_ (sparselm.model_selection.linesearchcv property)": [[8, "sparselm.model_selection.LineSearchCV.n_features_in_"]], "predict() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.predict"]], "predict() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.predict"]], "predict_log_proba() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.predict_log_proba"]], "predict_log_proba() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.predict_log_proba"]], "predict_proba() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.predict_proba"]], "predict_proba() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.predict_proba"]], "score() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.score"]], "score() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.score"]], "score_samples() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.score_samples"]], "score_samples() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.score_samples"]], "set_params() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.set_params"]], "set_params() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.set_params"]], "sparselm.model_selection": [[8, "module-sparselm.model_selection"]], "transform() (sparselm.model_selection.gridsearchcv method)": [[8, "sparselm.model_selection.GridSearchCV.transform"]], "transform() (sparselm.model_selection.linesearchcv method)": [[8, "sparselm.model_selection.LineSearchCV.transform"]], "stepwiseestimator (class in sparselm.stepwise)": [[9, "sparselm.stepwise.StepwiseEstimator"]], "fit() (sparselm.stepwise.stepwiseestimator method)": [[9, "sparselm.stepwise.StepwiseEstimator.fit"]], "get_params() (sparselm.stepwise.stepwiseestimator method)": [[9, "sparselm.stepwise.StepwiseEstimator.get_params"]], "predict() (sparselm.stepwise.stepwiseestimator method)": [[9, "sparselm.stepwise.StepwiseEstimator.predict"]], "score() (sparselm.stepwise.stepwiseestimator method)": [[9, "sparselm.stepwise.StepwiseEstimator.score"]], "set_params() (sparselm.stepwise.stepwiseestimator method)": [[9, "sparselm.stepwise.StepwiseEstimator.set_params"]], "sparselm.stepwise": [[9, "module-sparselm.stepwise"]], "steps (sparselm.stepwise.stepwiseestimator attribute)": [[9, "sparselm.stepwise.StepwiseEstimator.steps"]], "constrain_coefficients() (in module sparselm.tools)": [[10, "sparselm.tools.constrain_coefficients"]], "r2_score_to_cv_error() (in module sparselm.tools)": [[10, "sparselm.tools.r2_score_to_cv_error"]], "sparselm.tools": [[10, "module-sparselm.tools"]]}})