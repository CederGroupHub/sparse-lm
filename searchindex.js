Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_adaptive", "auto_examples/plot_chull", "auto_examples/plot_gl_sgl", "auto_examples/plot_sparse_signal", "auto_examples/sg_execution_times", "contributing", "index", "install", "license", "sparselm.model", "sparselm.model_selection", "sparselm.stepwise", "sparselm.tools"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_adaptive.rst", "auto_examples/plot_chull.rst", "auto_examples/plot_gl_sgl.rst", "auto_examples/plot_sparse_signal.rst", "auto_examples/sg_execution_times.rst", "contributing.rst", "index.rst", "install.rst", "license.rst", "sparselm.model.rst", "sparselm.model_selection.rst", "sparselm.stepwise.rst", "sparselm.tools.rst"], "titles": ["API Documentation", "Examples", "Using adaptive regularization", "Adding solution constraints", "(Sparse) Group regression", "Recovering sparse signals", "Computation times", "Contributing", "Sparse Linear Regression Models", "Install", "License", "sparselm.model", "sparselm.model_selection", "sparselm.stepwise", "sparselm.tools"], "terms": {"sparselm": [0, 2, 3, 4, 5, 8, 9], "model": [0, 1, 2, 3, 4, 5, 12, 13, 14], "ordinaryleastsquar": [0, 11], "lasso": [0, 2, 3, 4, 8, 11], "bestsubsetselect": [0, 5, 9, 11], "ridgedbestsubsetselect": [0, 11], "regularizedl0": [0, 9, 11], "l1l0": [0, 8, 11], "l2l0": [0, 3, 8, 11, 12], "grouplasso": [0, 4, 11], "overlapgrouplasso": [0, 11], "sparsegrouplasso": [0, 4, 11], "ridgedgrouplasso": [0, 11], "adaptivelasso": [0, 2, 8, 11], "adaptivegrouplasso": [0, 11], "adaptiveoverlapgrouplasso": [0, 11], "adaptivesparsegrouplasso": [0, 11], "adaptiveridgedgrouplasso": [0, 11], "stepwis": 0, "stepwiseestim": [0, 13], "model_select": [0, 2, 4, 8], "gridsearchcv": [0, 2, 4, 8, 11, 12, 13], "linesearchcv": [0, 12, 13], "tool": 0, "constrain_coeffici": [0, 14], "r2_score_to_cv_error": [0, 14], "thi": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14], "i": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13], "set": [1, 4, 11, 12, 13], "simpl": [1, 11, 12], "us": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "spars": [1, 3, 6, 7, 9, 10, 11, 12, 13], "linear": [1, 5, 11, 13, 14], "regress": [1, 3, 6, 9, 11, 12, 14], "implement": [1, 11, 12], "lm": [1, 3, 7, 8, 9, 10, 12], "For": [1, 7, 8, 9, 11, 12, 13], "vast": 1, "major": 1, "case": [1, 12], "can": [1, 2, 7, 9, 11, 12, 13], "same": [1, 11, 12], "wai": [1, 7, 10], "scikit": [1, 3, 5, 7, 8, 12, 13], "learn": [1, 3, 5, 7, 8, 12, 13], "recov": [1, 6], "signal": [1, 4, 6], "adapt": [1, 5, 6, 8, 11], "regular": [1, 6, 11], "group": [1, 2, 6, 8, 11, 12, 13], "ad": [1, 6, 11, 12], "solut": [1, 6, 11], "constraint": [1, 6, 11], "download": [1, 2, 3, 4, 5], "all": [1, 3, 7, 8, 10, 11, 12, 13], "python": [1, 2, 3, 4, 5, 9], "sourc": [1, 2, 3, 4, 5, 10, 11, 12, 13, 14], "code": [1, 2, 3, 4, 5, 10], "auto_examples_python": 1, "zip": [1, 3], "jupyt": [1, 2, 3, 4, 5], "notebook": [1, 2, 3, 4, 5], "auto_examples_jupyt": 1, "galleri": [1, 2, 3, 4, 5], "gener": [1, 2, 3, 4, 5, 11, 12, 13], "sphinx": [1, 2, 3, 4, 5], "go": [2, 3, 4, 5, 7, 13], "end": [2, 3, 4, 5, 12, 13], "full": [2, 3, 4, 5], "exampl": [2, 3, 4, 5, 11, 12, 13], "iter": [2, 11, 12], "re": [2, 7, 11], "weight": [2, 3, 11, 13, 14], "techniqu": 2, "improv": [2, 7], "featur": [2, 3, 7, 10, 11, 12, 13], "select": [2, 3, 5, 8, 11, 12, 13], "properti": [2, 12], "over": [2, 11, 12], "standard": [2, 11, 12, 14], "extens": 2, "In": [2, 3, 5, 7, 11, 12, 14], "we": [2, 3, 5, 7, 9, 12], "compar": [2, 5], "perform": [2, 4, 10, 12], "metric": [2, 3, 4, 12], "train": [2, 3, 4, 11, 12, 13], "r2": [2, 4, 14], "0": [2, 3, 4, 5, 6, 8, 11, 12, 13], "969": 2, "test": [2, 4, 7, 11, 12, 13], "952": 2, "rmse": [2, 3, 4], "37": 2, "434": 2, "42": 2, "415": 2, "970": 2, "958": 2, "36": 2, "521": 2, "40": 2, "001": 2, "import": [2, 3, 4, 5, 8], "matplotlib": [2, 3, 4, 5], "pyplot": [2, 3, 4, 5], "plt": [2, 3, 4, 5], "numpi": [2, 3, 4, 5, 8], "np": [2, 3, 4, 5, 8, 11, 12], "from": [2, 3, 4, 5, 8, 10, 11, 12, 13, 14], "sklearn": [2, 3, 4, 5, 8, 11, 12, 13], "dataset": [2, 4, 5, 8, 12], "make_regress": [2, 8], "linear_model": [2, 3, 4, 5, 8], "mean_squared_error": [2, 3, 4], "r2_score": [2, 4, 11, 12, 13], "kfold": [2, 4, 12], "train_test_split": [2, 4], "x": [2, 3, 4, 5, 8, 11, 12, 13, 14], "y": [2, 3, 4, 5, 8, 11, 12, 13, 14], "coef": [2, 4, 5, 11, 14], "n_sampl": [2, 4, 5, 8, 11, 12, 13], "200": [2, 4, 8], "n_featur": [2, 5, 8, 11, 12, 13], "100": [2, 4, 11], "n_inform": 2, "10": [2, 4, 5, 11], "nois": [2, 4, 5], "bia": [2, 4], "15": [2, 4, 6], "true": [2, 3, 4, 11, 12, 13], "random_st": [2, 4, 5, 8], "x_train": [2, 4], "x_test": [2, 4], "y_train": [2, 4], "y_test": [2, 4], "test_siz": [2, 4], "25": 2, "creat": [2, 3, 4, 11, 12], "estim": [2, 3, 4, 7, 8, 9, 11, 12, 13], "fit_intercept": [2, 3, 4, 8, 11], "alasso": [2, 8], "max_it": [2, 11], "5": [2, 3, 4, 5, 11, 12], "cv": [2, 4, 12, 14], "search": [2, 12, 13], "object": [2, 3, 11, 12, 13], "each": [2, 11, 12, 13, 14], "cv5": [2, 4], "n_split": [2, 4], "shuffl": [2, 4, 12], "param": [2, 11, 12, 13], "alpha": [2, 3, 4, 8, 11, 12], "logspac": [2, 4], "1": [2, 3, 4, 5, 10, 11, 12, 13, 14], "lasso_cv": [2, 4], "n_job": [2, 4, 12], "alasso_cv": 2, "fit": [2, 3, 4, 5, 8, 10, 11, 12, 13, 14], "data": [2, 3, 4, 5, 10, 11, 12, 13], "calcul": [2, 4], "lasso_train": [2, 4], "predict": [2, 3, 4, 11, 12, 13], "sqrt": [2, 3, 4, 11], "lasso_test": [2, 4], "alasso_train": 2, "alasso_test": 2, "print": [2, 3, 4, 8], "f": [2, 3, 4, 11], "3f": [2, 4], "plot": [2, 3, 4, 5], "valu": [2, 3, 4, 11, 12, 13], "fig": [2, 3, 4], "ax": [2, 3, 4], "subplot": [2, 3, 4, 5], "o": [2, 4], "label": [2, 4, 12], "min": [2, 4], "max": [2, 4], "k": [2, 4], "set_xlabel": [2, 3, 4], "set_ylabel": [2, 3, 4], "legend": [2, 3, 4], "show": [2, 3, 4, 5], "coeffici": [2, 3, 11, 13, 14], "best_estimator_": [2, 12], "coef_": [2, 3, 5, 11], "covari": [2, 3, 11], "index": [2, 3, 11, 12], "total": [2, 3, 4, 5, 6, 11, 12, 13], "run": [2, 3, 4, 5, 7, 9, 12], "time": [2, 3, 4, 5, 7, 11, 12], "script": [2, 3, 4, 5], "minut": [2, 3, 4, 5], "3": [2, 3, 4, 5, 10, 11, 12, 13], "737": [2, 6], "second": [2, 3, 4, 5, 11, 12], "plot_adapt": [2, 6], "py": [2, 3, 4, 5, 6], "ipynb": [2, 3, 4, 5], "allow": [3, 11, 12, 13], "includ": [3, 8, 10, 11, 12], "extern": 3, "expos": 3, "underli": [3, 8, 11, 12], "cvxpy": [3, 8, 9, 11], "problem": [3, 5, 7, 8, 9, 11], "solv": [3, 8, 9, 11], "addit": [3, 7, 11, 12], "non": [3, 5, 10, 12], "neg": [3, 11, 12, 13], "note": [3, 5, 11, 12, 13], "That": 3, "function": [3, 8, 10, 11, 12], "doe": [3, 12], "fulli": [3, 13], "align": 3, "requir": [3, 7, 9, 10, 11, 12, 13], "compat": [3, 13], "mean": [3, 11, 12, 13], "an": [3, 7, 9, 11, 12, 13, 14], "ski": 3, "kit": 3, "pipelin": [3, 11, 12, 13], "support": [3, 9, 11, 12], "To": [3, 7, 9], "how": [3, 4, 11, 12, 13], "common": 3, "materi": [3, 10], "scienc": 3, "format": [3, 7], "energi": [3, 10], "mani": 3, "configur": 3, "alloi": 3, "usual": [3, 9, 11], "veri": [3, 7, 8, 9, 11], "ensur": [3, 7, 11], "ground": 3, "state": 3, "e": [3, 7, 11, 12, 13], "defin": [3, 11, 12, 13], "lower": [3, 14], "convex": [3, 9], "hull": 3, "v": [3, 11, 13], "composit": [3, 12, 13], "graph": 3, "remain": 3, "similarli": 3, "often": 3, "ar": [3, 7, 8, 9, 10, 11, 12, 13], "abov": [3, 9, 10, 11], "The": [3, 7, 8, 9, 10, 11, 12, 13, 14], "follow": [3, 7, 10, 11], "methodologi": 3, "describ": [3, 11], "paper": 3, "http": [3, 5, 7, 9, 11], "www": [3, 11], "natur": 3, "com": [3, 7, 9], "articl": 3, "s41524": 3, "017": 3, "0032": 3, "pymatgen": 3, "analysi": 3, "packag": [3, 7], "instal": [3, 7, 10, 11], "easili": 3, "org": [3, 5, 11], "html": [3, 5, 11], "taken": 3, "tutori": [3, 11], "icet": 3, "materialsmodel": 3, "cluster": 3, "expans": 3, "0028": 3, "0030": 3, "constra": 3, "0037": 3, "json": 3, "phase_diagram": 3, "pd": 3, "core": 3, "structur": [3, 8, 12], "load": 3, "corr": 3, "npy": 3, "correspond": [3, 11, 12, 13], "open": [3, 7, 9, 11], "fp": 3, "from_dict": 3, "": [3, 7, 10, 11, 12, 13], "regressor": [3, 5, 11, 13], "hyperparamet": 3, "have": [3, 7, 11, 12], "alreadi": [3, 8, 11], "been": [3, 12], "tune": 3, "lasso_regressor": 3, "29e": 3, "pseudo": [3, 11], "l0": [3, 8, 11], "norm": [3, 11], "eta": [3, 11], "l2": [3, 11], "l2l0_regressor": 3, "16e": 3, "7": [3, 5, 8], "66e": 3, "6": [3, 5], "solver": [3, 5, 11], "gurobi": [3, 5, 11], "solver_opt": [3, 5, 11], "thread": [3, 5], "4": [3, 5, 13], "phase": 3, "diagram": 3, "entri": [3, 11], "training_entri": 3, "enumer": 3, "sampl": [3, 11, 12, 13, 14], "refer": [3, 11, 12], "correl": 3, "vector": [3, 11, 12, 13, 14], "len": [3, 5, 11, 12], "must": [3, 9, 10, 11, 12, 13], "scale": [3, 5], "size": [3, 11], "pdentri": 3, "attribut": [3, 11, 12], "append": 3, "training_pd": 3, "phasediagram": 3, "pplotter": 3, "pdplotter": 3, "backend": [3, 11], "show_unst": 3, "label_unst": 3, "fals": [3, 8, 11, 12, 13], "base": [3, 9, 11, 12, 13], "lasso_i": 3, "lasso_pd": 3, "s_i": 3, "y_i": 3, "l2l0_y": 3, "l2l0_pd": 3, "notic": [3, 10, 12, 13], "both": 3, "miss": 3, "ag5pd3": 3, "also": [3, 9, 11, 12, 13], "add": [3, 7, 11], "spuriou": 3, "present": 3, "matric": [3, 11], "two": 3, "type": [3, 11, 12, 13, 14], "contraint": 3, "keep": [3, 7, 11, 13, 14], "unchang": [3, 11, 12, 13], "2": [3, 4, 5, 8, 10, 11, 12, 13], "stai": 3, "comput": [3, 10, 12], "matrix": [3, 11, 12, 13], "unstabl": 3, "decomposit": 3, "product": [3, 5, 10], "x_unstabl": 3, "zero": 3, "shape": [3, 11, 12, 13], "unstable_entri": 3, "x_decomp": 3, "zeros_lik": 3, "is_el": 3, "continu": 3, "decomp_entri": 3, "ehul": 3, "get_decomp_and_e_above_hul": 3, "dentri": 3, "amount": 3, "item": 3, "ratio": [3, 11], "num_atom": 3, "wa": 3, "x_stabl": 3, "stable_entri": 3, "x_gsdecomp": 3, "gs_pd": 3, "get_decomp_and_phase_separation_energi": 3, "constrained_regressor": 3, "now": 3, "access": [3, 11], "ha": [3, 9, 11, 12, 13], "call": [3, 11, 12, 13], "gigen": 3, "generate_problem": [3, 11], "repres": [3, 11, 12], "regressino": 3, "j": 3, "canonicals_": [3, 11], "beta": [3, 11], "variabl": [3, 11, 12], "ie": [3, 11], "new": [3, 7, 11, 12, 13], "epsilon": 3, "0005": 3, "sensit": 3, "margin": 3, "add_constraint": [3, 11], "1e": [3, 11], "constrain": [3, 14], "look": 3, "l2l0c_y": 3, "constrained_pd": 3, "forc": 3, "respect": [3, 12], "trainind": 3, "differ": [3, 11, 12], "result": [3, 5, 12], "lasso_rms": 3, "l2l0_rmse": 3, "l2l0c_rmse": 3, "4f": 3, "965": [3, 6], "plot_chul": [3, 6], "simul": 4, "level": [4, 11], "sparsiti": [4, 11], "within": [4, 14], "onli": [4, 5, 7, 11, 12, 13], "867": 4, "831": 4, "170": 4, "553": 4, "195": 4, "703": 4, "869": 4, "830": 4, "169": 4, "129": 4, "990": 4, "939": 4, "82": 4, "316": 4, "119": 4, "818": 4, "935": 4, "837": 4, "85": 4, "122": 4, "117": 4, "262": 4, "warn": 4, "make_group_regress": 4, "filterwarn": 4, "ignor": [4, 11, 12, 13], "categori": 4, "userwarn": 4, "converg": [4, 11], "400": 4, "n_group": 4, "n_features_per_group": 4, "n_informative_group": 4, "frac_informative_in_group": 4, "split": [4, 12], "glasso_cv": 4, "marker": 4, "l": 4, "glasso_train": 4, "glasso_test": 4, "n": 4, "sglasso_cv": 4, "l1_ratio": [4, 11], "arang": 4, "8": [4, 5], "sglasso_train": 4, "sglasso_test": 4, "541": [4, 6], "plot_gl_sgl": [4, 6], "obtain": [5, 14], "those": 5, "orthogonalmatchingpursuit": 5, "although": 5, "best": [5, 8, 11, 12, 13], "subset": [5, 8, 11], "tend": 5, "give": [5, 12], "more": [5, 7, 8, 9, 11, 12], "accur": 5, "much": 5, "better": 5, "larger": [5, 9], "document": [5, 7, 8, 9, 10, 12], "stabl": 5, "auto_exampl": [5, 6], "plot_omp": 5, "sphx": 5, "glr": 5, "auto": 5, "omp": 5, "restrict": 5, "licens": [5, 9], "expir": 5, "2024": 5, "28": 5, "make_sparse_coded_sign": 5, "n_compon": 5, "50": 5, "20": 5, "n_nonzero_coef": 5, "w": [5, 11, 12, 13], "t": [5, 11, 12, 13], "idx": 5, "nonzero": [5, 11], "distort": 5, "clean": 5, "y_noisi": 5, "005": 5, "random": 5, "randn": 5, "figur": 5, "figsiz": 5, "14": 5, "xlim": 5, "titl": 5, "stem": 5, "free": [5, 7, 9, 10], "reconstruct": 5, "idx_r": 5, "orthogon": 5, "match": 5, "pursuit": 5, "measur": 5, "bss": 5, "sparse_bound": [5, 11], "noisi": 5, "recoveri": 5, "tight_layout": 5, "460": [5, 6], "plot_sparse_sign": [5, 6], "00": 6, "30": 6, "702": 6, "execut": [6, 12], "file": 6, "mb": 6, "08": 6, "03": 6, "02": 6, "welcom": 7, "form": [7, 10, 11, 12], "pleas": [7, 11, 12, 13], "consid": [7, 13], "ani": [7, 8, 9, 10, 11, 13], "you": [7, 8, 9, 10, 11, 12, 13], "tracker": 7, "share": 7, "request": [7, 11, 12, 13], "idea": 7, "report": 7, "save": 7, "help": [7, 13], "make": [7, 10], "sure": 7, "thei": [7, 13], "properli": 7, "address": 7, "descript": 7, "neat": 7, "possibl": [7, 10, 11, 12, 13], "when": [7, 11, 12, 13], "up": [7, 12, 13], "If": [7, 8, 9, 11, 12, 13], "written": [7, 10], "want": [7, 11], "start": [7, 12], "write": 7, "think": 7, "step": [7, 11, 12, 13], "below": 7, "should": [7, 11, 12, 13], "unit": [7, 9], "well": [7, 11, 12], "googl": 7, "style": 7, "docstr": 7, "pass": [7, 11, 12, 13], "pre": [7, 9], "commit": 7, "hook": 7, "black": 7, "first": [7, 9, 11, 12, 13], "fork": [7, 9], "repositori": [7, 9], "clone": [7, 9, 11], "your": [7, 10, 12], "local": 7, "workspac": 7, "upstream": 7, "remot": 7, "git": [7, 9], "github": [7, 9], "cedergrouphub": [7, 9], "alwai": [7, 11, 12, 13], "main": 7, "branch": 7, "date": 7, "Be": 7, "good": [7, 10, 12], "about": [7, 12], "do": [7, 12, 13], "fast": [7, 12], "forward": 7, "merg": 7, "while": [7, 12], "order": [7, 12], "chang": [7, 11, 12, 13], "avail": [7, 10, 12], "without": [7, 9, 10], "edit": 7, "mode": [7, 12], "pip": [7, 9], "so": [7, 9, 11, 12], "recommend": [7, 9, 11], "short": 7, "easi": [7, 8], "fix": [7, 10, 13], "complex": 7, "try": [7, 12], "name": [7, 10, 11, 12, 13], "feautr": 7, "feel": 7, "pr": 7, "even": [7, 10, 11], "befor": [7, 11, 13], "finish": 7, "wip": 7, "its": [7, 10], "option": [7, 8, 9, 11, 12, 13], "mark": 7, "draft": 7, "setup": 7, "satisfi": 7, "lint": 7, "top": 7, "directori": 7, "ci": 7, "upon": 7, "them": [7, 12, 13], "find": [7, 12], "pytest": [7, 9], "sever": 8, "absent": 8, "modul": 8, "design": 8, "right": [8, 10], "optim": [8, 9, 11, 12, 13], "express": [8, 10, 11, 12], "leverag": 8, "overlap": [8, 11], "ridg": [8, 11], "version": [8, 9, 11, 12, 13], "paramet": [8, 11, 12, 13, 14], "just": [8, 11], "like": [8, 11, 12, 13], "would": [8, 11, 12, 13], "5000": 8, "param_grid": [8, 12], "logsppac": 8, "cvsearch": 8, "best_params_": [8, 12], "detail": [8, 9, 11, 12], "see": [8, 9, 11, 12, 13], "cd": 9, "sinc": [9, 13], "specifi": [9, 11, 12, 13, 14], "ship": 9, "osqp": 9, "sc": 9, "eco": 9, "which": [9, 11, 12, 13], "enough": 9, "most": 9, "howev": [9, 10, 11, 12], "mix": [9, 11], "integ": [9, 11, 12], "quadrat": [9, 11], "program": [9, 11], "formul": 9, "class": [9, 11, 12, 13], "highli": [9, 11], "capabl": 9, "ecos_bb": [9, 11], "slow": [9, 11], "importantli": 9, "recur": [9, 11], "correct": [9, 11, 13], "issu": [9, 11], "section": [9, 11], "It": 9, "directli": [9, 10, 11, 12], "gurobipi": 9, "trial": 9, "small": 9, "grant": [9, 10], "academ": 9, "student": 9, "research": 9, "altern": [9, 11], "interfac": [9, 12], "pyscipopt": 9, "build": 9, "here": [9, 11, 12], "conda": 9, "forg": 9, "channel": 9, "c": [9, 10, 11, 13], "scipopt": 9, "command": 9, "built": 9, "need": [9, 11, 12], "folder": 9, "Then": 9, "distribut": 10, "under": [10, 11], "modifi": 10, "claus": 10, "bsd": 10, "licenc": 10, "copyright": 10, "2022": 10, "regent": 10, "univers": 10, "california": 10, "through": 10, "lawrenc": 10, "berkelei": 10, "nation": 10, "laboratori": 10, "subject": 10, "receipt": 10, "approv": 10, "u": [10, 11, 13], "dept": 10, "reserv": 10, "redistribut": 10, "binari": [10, 12], "modif": 10, "permit": [10, 12], "provid": [10, 11, 12, 13], "condit": [10, 11], "met": 10, "retain": [10, 11, 12, 13], "list": [10, 11, 12, 13, 14], "disclaim": 10, "reproduc": 10, "other": [10, 11, 12, 13], "neither": 10, "nor": 10, "contributor": 10, "mai": [10, 11, 13], "endors": 10, "promot": 10, "deriv": 10, "softwar": 10, "specif": [10, 12], "prior": 10, "permiss": 10, "BY": 10, "THE": 10, "holder": 10, "AND": 10, "AS": 10, "OR": 10, "impli": 10, "warranti": 10, "BUT": 10, "NOT": [10, 12], "limit": 10, "TO": 10, "OF": 10, "merchant": 10, "FOR": 10, "A": [10, 11, 12, 13, 14], "particular": 10, "purpos": 10, "IN": 10, "NO": 10, "event": 10, "shall": 10, "owner": 10, "BE": 10, "liabl": 10, "direct": 10, "indirect": 10, "incident": 10, "special": 10, "exemplari": 10, "consequenti": 10, "damag": 10, "procur": 10, "substitut": 10, "servic": 10, "loss": 10, "profit": 10, "busi": 10, "interrupt": 10, "caus": 10, "ON": 10, "theori": 10, "liabil": 10, "whether": [10, 11], "contract": 10, "strict": [10, 11], "tort": 10, "neglig": 10, "otherwis": [10, 11, 12, 13], "aris": 10, "out": 10, "IF": 10, "advis": 10, "SUCH": 10, "oblig": 10, "whatsoev": 10, "bug": 10, "patch": 10, "upgrad": 10, "enhanc": 10, "anyon": 10, "choos": [10, 12], "either": [10, 12, 13], "publicli": 10, "impos": 10, "separ": 10, "agreement": 10, "herebi": 10, "exclus": 10, "royalti": 10, "perpetu": 10, "prepar": [10, 11, 13], "work": [10, 11, 12, 13], "incorpor": 10, "sublicens": 10, "thereof": 10, "copy_x": 11, "warm_start": 11, "none": [11, 12, 13, 14], "cvxregressor": 11, "ordinari": 11, "least": [11, 12], "squar": [11, 13], "min_": 11, "2_2": 11, "bool": [11, 12, 13], "intercept": 11, "assum": [11, 12], "center": 11, "copi": 11, "els": 11, "overwritten": 11, "reus": 11, "previou": [11, 13], "initi": [11, 12, 13], "eras": 11, "str": [11, 12, 13], "advanc": 11, "method": [11, 12, 13, 14], "dict": [11, 12], "dictionari": [11, 12, 13], "keyword": [11, 13], "argument": [11, 12, 13], "doc": 11, "link": 11, "inform": [11, 12, 13], "ndarrai": [11, 12], "cost": 11, "formula": 11, "float": [11, 12, 13, 14], "independ": 11, "term": 11, "decis": [11, 12], "canon": 11, "simplenamespac": 11, "namespac": 11, "contain": [11, 12, 13], "hyper": [11, 12, 13], "auxiliari": 11, "reli": 11, "etc": 11, "becaus": [11, 12, 13], "cp": 11, "return": [11, 12, 13, 14], "sample_weight": [11, 12, 13], "arg": [11, 13], "kwarg": [11, 13], "input": [11, 12, 13], "minim": 11, "given": [11, 12, 13], "arraylik": [11, 13, 14], "target": [11, 12, 13, 14], "Will": [11, 13], "cast": [11, 13], "dtype": [11, 13], "necessari": [11, 13], "n_target": [11, 13], "individu": [11, 13], "default": [11, 12, 13, 14], "posit": [11, 13], "instanc": [11, 12, 13], "self": [11, 12, 13], "preprocess_data": 11, "almost": 11, "further": 11, "control": [11, 12], "preprocess": 11, "kept": 11, "correctli": 11, "subsequ": 11, "rescal": 11, "accordingli": 11, "get_metadata_rout": [11, 12, 13], "get": [11, 12, 13], "metadata": [11, 12, 13], "rout": [11, 12, 13], "check": [11, 12, 13], "user": [11, 12, 13], "guid": [11, 12, 13], "mechan": [11, 12, 13], "metadatarequest": [11, 12, 13], "encapsul": [11, 12, 13], "get_param": [11, 12, 13], "deep": [11, 12, 13], "subobject": [11, 12], "map": [11, 12], "arrai": [11, 12, 13, 14], "score": [11, 12, 13, 14], "determin": [11, 12, 13], "r": [11, 12, 13], "frac": [11, 13], "where": [11, 12, 13], "residu": [11, 13], "sum": [11, 13], "y_true": [11, 13], "y_pred": [11, 12, 13, 14], "arbitrarili": [11, 13], "wors": [11, 13], "constant": [11, 13], "expect": [11, 13], "disregard": [11, 13], "some": [11, 12, 13], "precomput": [11, 13], "kernel": [11, 13], "instead": [11, 12, 13], "n_samples_fit": [11, 13], "number": [11, 12, 13], "n_output": [11, 12, 13], "multioutput": [11, 13], "uniform_averag": [11, 13], "23": [11, 13], "consist": [11, 13], "influenc": [11, 13], "except": [11, 13], "multioutputregressor": [11, 13], "set_fit_request": [11, 12, 13], "relev": [11, 12, 13], "enable_metadata_rout": [11, 12, 13], "set_config": [11, 12, 13], "meta": [11, 12, 13], "rais": [11, 12, 13], "error": [11, 12, 13, 14], "alia": [11, 12, 13], "origin": [11, 12, 13], "util": [11, 12, 13], "metadata_rout": [11, 12, 13], "exist": [11, 12, 13], "sub": [11, 12, 13], "g": [11, 12, 13], "insid": [11, 12, 13], "effect": [11, 12, 13], "updat": [11, 12, 13], "set_param": [11, 12, 13], "nest": [11, 12, 13], "latter": [11, 12], "compon": [11, 12], "__": [11, 12], "set_score_request": [11, 13], "_1": 11, "big_m": 11, "hierarchi": [11, 13], "ignore_psd_check": 11, "miqpl0": 11, "miqp": 11, "length": [11, 12], "simpli": 11, "rang": [11, 14], "int": [11, 12, 13], "upper": [11, 14], "bound": [11, 14], "associ": 11, "beta_c": 11, "_2": 11, "store": 11, "relat": [11, 12, 13], "between": 11, "sublist": 11, "indic": [11, 12, 13, 14], "element": [11, 12], "depend": 11, "psd": 11, "avoid": [11, 12], "poorli": 11, "But": 11, "scip": 11, "take": 11, "long": 11, "larg": [11, 12], "tikhonov_w": 11, "tikhonovmixin": 11, "tihkonov": 11, "compulsori": 11, "sum_": 11, "z_g": 11, "boolean": 11, "slack": 11, "1d": [11, 12, 14], "distinct": 11, "singleton": 11, "mixedl0": 11, "discuss": 11, "arxiv": 11, "ab": 11, "1807": 11, "10753": 11, "extend": 11, "doi": 11, "1287": 11, "opr": 11, "2015": 11, "1436": 11, "l1": 11, "propos": 11, "2204": 11, "13789": 11, "And": 11, "tikhonov": 11, "wether": 11, "cvxestim": [11, 13], "group_weight": 11, "w_g": 11, "beta_g": 11, "equal": [11, 12], "ones": 11, "penalti": 11, "faculti": 11, "washington": 11, "edu": 11, "nrsimon": 11, "standgl": 11, "pdf": 11, "group_list": 11, "accept": 11, "than": [11, 12], "one": [11, 12], "hold": 11, "inner": 11, "belong": 11, "third": 11, "word": 11, "delta": 11, "delta_l": 11, "proper": 11, "lenght": 11, "ment": 11, "hyperparamt": 11, "ep": 11, "06": 11, "tol": 11, "update_funct": 11, "known": 11, "maximum": [11, 12], "denomin": 11, "absolut": 11, "toler": 11, "success": 11, "callabl": [11, 12], "signatur": 11, "group_norm": 11, "v_g": 11, "w_l": 11, "done": 11, "portion": 11, "beyond": 12, "opt_selection_method": 12, "max_scor": 12, "neg_root_mean_squared_error": 12, "refit": 12, "verbos": 12, "pre_dispatch": 12, "error_scor": 12, "nan": 12, "return_train_scor": 12, "exhaust": 12, "rule": 12, "numer": 12, "robust": 12, "opt_select": 12, "switch": 12, "current": 12, "maxim": 12, "one_std_scor": 12, "appli": 12, "instanti": 12, "grid": 12, "point": 12, "kei": 12, "multipl": 12, "parallel": 12, "tupl": [12, 13], "strategi": 12, "evalu": 12, "cross": [12, 14], "valid": [12, 14], "singl": 12, "string": 12, "uniqu": 12, "contrast": 12, "job": 12, "unless": 12, "joblib": 12, "parallel_backend": 12, "context": 12, "processor": 12, "glossari": 12, "found": 12, "whole": 12, "denot": 12, "scorer": 12, "consider": 12, "best_index_": 12, "cv_results_": 12, "accord": 12, "best_score_": 12, "made": 12, "know": 12, "fold": 12, "stratifi": 12, "splitter": 12, "yield": 12, "classifi": 12, "multiclass": 12, "stratifiedkfold": 12, "These": 12, "across": 12, "variou": 12, "danger": 12, "intern": 12, "similar": 12, "close": 12, "row": 12, "repeatedkfold": 12, "higher": 12, "messag": 12, "candid": 12, "displai": 12, "togeth": 12, "dispatch": 12, "dure": 12, "reduc": 12, "explos": 12, "memori": 12, "consumpt": 12, "cpu": 12, "process": 12, "immedi": 12, "spawn": 12, "lightweight": 12, "delai": 12, "due": 12, "demand": 12, "exact": 12, "assign": 12, "occur": 12, "fitfailedwarn": 12, "affect": 12, "insight": 12, "impact": 12, "overfit": 12, "underfit": 12, "trade": 12, "off": 12, "computation": 12, "expens": 12, "strictli": 12, "fit_param": 12, "rel": 12, "classif": 12, "unsupervis": 12, "conjunct": 12, "groupkfold": 12, "whose": 12, "num_sampl": 12, "along": 12, "gridsearch": 12, "classes_": 12, "decision_funct": 12, "fulfil": 12, "assumpt": 12, "y_score": 12, "n_class": 12, "inverse_transform": 12, "xt": 12, "n_features_in_": [12, 13], "seen": 12, "predict_log_proba": 12, "log": 12, "probabl": 12, "predict_proba": 12, "score_sampl": 12, "24": 12, "transform": 12, "space": 12, "n_iter": 12, "basesearchcv": 12, "line": 12, "dimension": 12, "certain": [12, 13], "linesearch": 12, "cycl": 12, "practic": 12, "could": 12, "l0_ratio": 12, "One": 12, "scan": 12, "piec": 13, "wise": 13, "estimator_feature_indic": 13, "_basecomposit": 13, "regressormixin": 13, "linearmodel": 13, "rest": 13, "next": 13, "cannot": 13, "member": 13, "scope": 13, "adjust": 13, "part": 13, "slice": 13, "respons": 13, "wrap": 13, "No": 13, "violat": 13, "convent": 13, "therefor": 13, "check_estim": 13, "guarante": 13, "underscor": 13, "rememb": 13, "wish": 13, "_fit": 13, "varieti": 14, "polish": 14, "ce": 14, "high": 14, "low": 14, "decor": 14, "At": 14, "runtim": 14, "fit_method": 14, "definit": 14, "def": 14, "your_fit_method": 14, "convert": 14}, "objects": {"sparselm": [[11, 0, 0, "-", "model"], [12, 0, 0, "-", "model_selection"], [13, 0, 0, "-", "stepwise"], [14, 0, 0, "-", "tools"]], "sparselm.model": [[11, 1, 1, "", "AdaptiveGroupLasso"], [11, 1, 1, "", "AdaptiveLasso"], [11, 1, 1, "", "AdaptiveOverlapGroupLasso"], [11, 1, 1, "", "AdaptiveRidgedGroupLasso"], [11, 1, 1, "", "AdaptiveSparseGroupLasso"], [11, 1, 1, "", "BestSubsetSelection"], [11, 1, 1, "", "GroupLasso"], [11, 1, 1, "", "L1L0"], [11, 1, 1, "", "L2L0"], [11, 1, 1, "", "Lasso"], [11, 1, 1, "", "OrdinaryLeastSquares"], [11, 1, 1, "", "OverlapGroupLasso"], [11, 1, 1, "", "RegularizedL0"], [11, 1, 1, "", "RidgedBestSubsetSelection"], [11, 1, 1, "", "RidgedGroupLasso"], [11, 1, 1, "", "SparseGroupLasso"]], "sparselm.model.AdaptiveGroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveOverlapGroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveRidgedGroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.AdaptiveSparseGroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.BestSubsetSelection": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.GroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.L1L0": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.L2L0": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.Lasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.OrdinaryLeastSquares": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.OverlapGroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.RegularizedL0": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.RidgedBestSubsetSelection": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.RidgedGroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model.SparseGroupLasso": [[11, 2, 1, "", "add_constraints"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "generate_problem"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sparselm.model_selection": [[12, 1, 1, "", "GridSearchCV"], [12, 1, 1, "", "LineSearchCV"]], "sparselm.model_selection.GridSearchCV": [[12, 3, 1, "", "classes_"], [12, 2, 1, "", "decision_function"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "inverse_transform"], [12, 3, 1, "", "n_features_in_"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_log_proba"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "score"], [12, 2, 1, "", "score_samples"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "transform"]], "sparselm.model_selection.LineSearchCV": [[12, 3, 1, "", "classes_"], [12, 2, 1, "", "decision_function"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "inverse_transform"], [12, 3, 1, "", "n_features_in_"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_log_proba"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "score"], [12, 2, 1, "", "score_samples"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "transform"]], "sparselm.stepwise": [[13, 1, 1, "", "StepwiseEstimator"]], "sparselm.stepwise.StepwiseEstimator": [[13, 2, 1, "", "fit"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"], [13, 4, 1, "", "steps"]], "sparselm.tools": [[14, 5, 1, "", "constrain_coefficients"], [14, 5, 1, "", "r2_score_to_cv_error"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": 0, "exampl": 1, "us": 2, "adapt": 2, "regular": 2, "ad": [3, 7], "solut": 3, "constraint": 3, "spars": [4, 5, 8], "group": 4, "regress": [4, 8], "recov": 5, "signal": 5, "comput": 6, "time": 6, "contribut": 7, "bug": 7, "issu": 7, "input": 7, "question": 7, "develop": 7, "guidelin": 7, "code": 7, "linear": 8, "model": [8, 11], "avail": 8, "basic": 8, "usag": 8, "instal": 9, "pypi": 9, "from": 9, "sourc": 9, "miqp": 9, "solver": 9, "gurobi": 9, "scip": 9, "test": 9, "licens": 10, "sparselm": [11, 12, 13, 14], "model_select": 12, "stepwis": 13, "tool": 14}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Examples": [[1, "examples"]], "Using adaptive regularization": [[2, "using-adaptive-regularization"]], "Adding solution constraints": [[3, "adding-solution-constraints"]], "(Sparse) Group regression": [[4, "sparse-group-regression"]], "Recovering sparse signals": [[5, "recovering-sparse-signals"]], "Computation times": [[6, "computation-times"]], "Contributing": [[7, "contributing"]], "Bugs, issues, input, and questions": [[7, "bugs-issues-input-and-questions"]], "Developing guidelines": [[7, "developing-guidelines"]], "Adding code contributions": [[7, "adding-code-contributions"]], "Sparse Linear Regression Models": [[8, "sparse-linear-regression-models"]], "Available regression models": [[8, "available-regression-models"]], "Basic usage": [[8, "basic-usage"]], "Install": [[9, "install"]], "PyPI": [[9, "pypi"]], "Install from source": [[9, "install-from-source"]], "Installing MIQP solvers": [[9, "installing-miqp-solvers"]], "Gurobi": [[9, "gurobi"]], "SCIP": [[9, "scip"]], "Testing": [[9, "testing"]], "License": [[10, "license"]], "sparselm.model": [[11, "module-sparselm.model"]], "sparselm.model_selection": [[12, "module-sparselm.model_selection"]], "sparselm.stepwise": [[13, "module-sparselm.stepwise"]], "sparselm.tools": [[14, "module-sparselm.tools"]]}, "indexentries": {"adaptivegrouplasso (class in sparselm.model)": [[11, "sparselm.model.AdaptiveGroupLasso"]], "adaptivelasso (class in sparselm.model)": [[11, "sparselm.model.AdaptiveLasso"]], "adaptiveoverlapgrouplasso (class in sparselm.model)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso"]], "adaptiveridgedgrouplasso (class in sparselm.model)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso"]], "adaptivesparsegrouplasso (class in sparselm.model)": [[11, "sparselm.model.AdaptiveSparseGroupLasso"]], "bestsubsetselection (class in sparselm.model)": [[11, "sparselm.model.BestSubsetSelection"]], "grouplasso (class in sparselm.model)": [[11, "sparselm.model.GroupLasso"]], "l1l0 (class in sparselm.model)": [[11, "sparselm.model.L1L0"]], "l2l0 (class in sparselm.model)": [[11, "sparselm.model.L2L0"]], "lasso (class in sparselm.model)": [[11, "sparselm.model.Lasso"]], "ordinaryleastsquares (class in sparselm.model)": [[11, "sparselm.model.OrdinaryLeastSquares"]], "overlapgrouplasso (class in sparselm.model)": [[11, "sparselm.model.OverlapGroupLasso"]], "regularizedl0 (class in sparselm.model)": [[11, "sparselm.model.RegularizedL0"]], "ridgedbestsubsetselection (class in sparselm.model)": [[11, "sparselm.model.RidgedBestSubsetSelection"]], "ridgedgrouplasso (class in sparselm.model)": [[11, "sparselm.model.RidgedGroupLasso"]], "sparsegrouplasso (class in sparselm.model)": [[11, "sparselm.model.SparseGroupLasso"]], "add_constraints() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.add_constraints"]], "add_constraints() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.add_constraints"]], "add_constraints() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.add_constraints"]], "add_constraints() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.add_constraints"]], "add_constraints() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.add_constraints"]], "add_constraints() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.add_constraints"]], "add_constraints() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.add_constraints"]], "add_constraints() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.add_constraints"]], "add_constraints() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.add_constraints"]], "add_constraints() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.add_constraints"]], "fit() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.fit"]], "fit() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.fit"]], "fit() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.fit"]], "fit() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.fit"]], "fit() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.fit"]], "fit() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.fit"]], "fit() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.fit"]], "fit() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.fit"]], "fit() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.fit"]], "fit() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.fit"]], "fit() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.fit"]], "fit() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.fit"]], "fit() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.fit"]], "fit() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.fit"]], "fit() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.fit"]], "fit() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.fit"]], "generate_problem() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.generate_problem"]], "generate_problem() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.generate_problem"]], "generate_problem() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.generate_problem"]], "generate_problem() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.generate_problem"]], "generate_problem() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.generate_problem"]], "generate_problem() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.generate_problem"]], "generate_problem() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.generate_problem"]], "generate_problem() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.generate_problem"]], "generate_problem() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.generate_problem"]], "generate_problem() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.generate_problem"]], "get_metadata_routing() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.get_metadata_routing"]], "get_metadata_routing() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.get_metadata_routing"]], "get_params() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.get_params"]], "get_params() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.get_params"]], "get_params() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.get_params"]], "get_params() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.get_params"]], "get_params() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.get_params"]], "get_params() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.get_params"]], "get_params() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.get_params"]], "get_params() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.get_params"]], "get_params() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.get_params"]], "get_params() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.get_params"]], "get_params() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.get_params"]], "get_params() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.get_params"]], "get_params() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.get_params"]], "get_params() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.get_params"]], "get_params() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.get_params"]], "get_params() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.get_params"]], "module": [[11, "module-sparselm.model"], [12, "module-sparselm.model_selection"], [13, "module-sparselm.stepwise"], [14, "module-sparselm.tools"]], "predict() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.predict"]], "predict() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.predict"]], "predict() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.predict"]], "predict() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.predict"]], "predict() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.predict"]], "predict() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.predict"]], "predict() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.predict"]], "predict() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.predict"]], "predict() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.predict"]], "predict() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.predict"]], "predict() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.predict"]], "predict() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.predict"]], "predict() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.predict"]], "predict() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.predict"]], "predict() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.predict"]], "predict() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.predict"]], "score() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.score"]], "score() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.score"]], "score() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.score"]], "score() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.score"]], "score() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.score"]], "score() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.score"]], "score() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.score"]], "score() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.score"]], "score() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.score"]], "score() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.score"]], "score() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.score"]], "score() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.score"]], "score() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.score"]], "score() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.score"]], "score() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.score"]], "score() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.score"]], "set_fit_request() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.set_fit_request"]], "set_fit_request() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.set_fit_request"]], "set_fit_request() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.set_fit_request"]], "set_fit_request() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.set_fit_request"]], "set_fit_request() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.set_fit_request"]], "set_fit_request() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.set_fit_request"]], "set_fit_request() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.set_fit_request"]], "set_fit_request() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.set_fit_request"]], "set_fit_request() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.set_fit_request"]], "set_params() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.set_params"]], "set_params() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.set_params"]], "set_params() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.set_params"]], "set_params() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.set_params"]], "set_params() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.set_params"]], "set_params() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.set_params"]], "set_params() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.set_params"]], "set_params() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.set_params"]], "set_params() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.set_params"]], "set_params() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.set_params"]], "set_params() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.set_params"]], "set_params() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.set_params"]], "set_params() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.set_params"]], "set_params() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.set_params"]], "set_params() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.set_params"]], "set_params() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.set_params"]], "set_score_request() (sparselm.model.adaptivegrouplasso method)": [[11, "sparselm.model.AdaptiveGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptivelasso method)": [[11, "sparselm.model.AdaptiveLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptiveoverlapgrouplasso method)": [[11, "sparselm.model.AdaptiveOverlapGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptiveridgedgrouplasso method)": [[11, "sparselm.model.AdaptiveRidgedGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.adaptivesparsegrouplasso method)": [[11, "sparselm.model.AdaptiveSparseGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.bestsubsetselection method)": [[11, "sparselm.model.BestSubsetSelection.set_score_request"]], "set_score_request() (sparselm.model.grouplasso method)": [[11, "sparselm.model.GroupLasso.set_score_request"]], "set_score_request() (sparselm.model.l1l0 method)": [[11, "sparselm.model.L1L0.set_score_request"]], "set_score_request() (sparselm.model.l2l0 method)": [[11, "sparselm.model.L2L0.set_score_request"]], "set_score_request() (sparselm.model.lasso method)": [[11, "sparselm.model.Lasso.set_score_request"]], "set_score_request() (sparselm.model.ordinaryleastsquares method)": [[11, "sparselm.model.OrdinaryLeastSquares.set_score_request"]], "set_score_request() (sparselm.model.overlapgrouplasso method)": [[11, "sparselm.model.OverlapGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.regularizedl0 method)": [[11, "sparselm.model.RegularizedL0.set_score_request"]], "set_score_request() (sparselm.model.ridgedbestsubsetselection method)": [[11, "sparselm.model.RidgedBestSubsetSelection.set_score_request"]], "set_score_request() (sparselm.model.ridgedgrouplasso method)": [[11, "sparselm.model.RidgedGroupLasso.set_score_request"]], "set_score_request() (sparselm.model.sparsegrouplasso method)": [[11, "sparselm.model.SparseGroupLasso.set_score_request"]], "sparselm.model": [[11, "module-sparselm.model"]], "gridsearchcv (class in sparselm.model_selection)": [[12, "sparselm.model_selection.GridSearchCV"]], "linesearchcv (class in sparselm.model_selection)": [[12, "sparselm.model_selection.LineSearchCV"]], "classes_ (sparselm.model_selection.gridsearchcv property)": [[12, "sparselm.model_selection.GridSearchCV.classes_"]], "classes_ (sparselm.model_selection.linesearchcv property)": [[12, "sparselm.model_selection.LineSearchCV.classes_"]], "decision_function() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.decision_function"]], "decision_function() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.decision_function"]], "fit() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.fit"]], "fit() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.fit"]], "get_metadata_routing() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.get_metadata_routing"]], "get_metadata_routing() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.get_metadata_routing"]], "get_params() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.get_params"]], "get_params() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.get_params"]], "inverse_transform() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.inverse_transform"]], "inverse_transform() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.inverse_transform"]], "n_features_in_ (sparselm.model_selection.gridsearchcv property)": [[12, "sparselm.model_selection.GridSearchCV.n_features_in_"]], "n_features_in_ (sparselm.model_selection.linesearchcv property)": [[12, "sparselm.model_selection.LineSearchCV.n_features_in_"]], "predict() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.predict"]], "predict() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.predict"]], "predict_log_proba() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.predict_log_proba"]], "predict_log_proba() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.predict_log_proba"]], "predict_proba() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.predict_proba"]], "predict_proba() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.predict_proba"]], "score() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.score"]], "score() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.score"]], "score_samples() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.score_samples"]], "score_samples() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.score_samples"]], "set_fit_request() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.set_fit_request"]], "set_fit_request() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.set_fit_request"]], "set_params() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.set_params"]], "set_params() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.set_params"]], "sparselm.model_selection": [[12, "module-sparselm.model_selection"]], "transform() (sparselm.model_selection.gridsearchcv method)": [[12, "sparselm.model_selection.GridSearchCV.transform"]], "transform() (sparselm.model_selection.linesearchcv method)": [[12, "sparselm.model_selection.LineSearchCV.transform"]], "stepwiseestimator (class in sparselm.stepwise)": [[13, "sparselm.stepwise.StepwiseEstimator"]], "fit() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.fit"]], "get_metadata_routing() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.get_metadata_routing"]], "get_params() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.get_params"]], "predict() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.predict"]], "score() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.score"]], "set_fit_request() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.set_fit_request"]], "set_params() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.set_params"]], "set_score_request() (sparselm.stepwise.stepwiseestimator method)": [[13, "sparselm.stepwise.StepwiseEstimator.set_score_request"]], "sparselm.stepwise": [[13, "module-sparselm.stepwise"]], "steps (sparselm.stepwise.stepwiseestimator attribute)": [[13, "sparselm.stepwise.StepwiseEstimator.steps"]], "constrain_coefficients() (in module sparselm.tools)": [[14, "sparselm.tools.constrain_coefficients"]], "r2_score_to_cv_error() (in module sparselm.tools)": [[14, "sparselm.tools.r2_score_to_cv_error"]], "sparselm.tools": [[14, "module-sparselm.tools"]]}})